View(GOBP_CELLULAR_GLUCURONIDATION)
View(GOBP_CYTOPLASMIC_TRANSLATION)
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
posdfs <- name
posdfs <- filter(posdfs$CORE.ENRICHMENT = "Yes")
View(GOBP_URONIC_ACID_METABOLIC_PROCESS)
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
posdfs <- name
posdfs <- filter(posdfs, posdfs$CORE.ENRICHMENT = "Yes")
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
filter(name, name$CORE.ENRICHMENT = "Yes")
name <- filter(name, name$CORE.ENRICHMENT = "Yes")
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
name <- filter(name, name$CORE.ENRICHMENT = "Yes")
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
posdfs <- filter(name, name$CORE.ENRICHMENT == "Yes")
}
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
}
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
assign (name, filter(name, name$CORE.ENRICHMENT = "Yes"))
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
assign (name, filter(name, CORE.ENRICHMENT = "Yes"))
}
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
assign (name, filter(name, CORE.ENRICHMENT == "Yes"))
}
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
name$CORE.ENRICHMENT <- factor(name$CORE.ENRICHMENT)
# assign (name, filter(name, CORE.ENRICHMENT == "Yes"))
}
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
posbps[[i]]$CORE.ENRICHMENT <- factor(posbps[[i]]$CORE.ENRICHMENT)
# assign (name, filter(name, CORE.ENRICHMENT == "Yes"))
}
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
paste0(posbps[[i]], "$CORE.ENRICHMENT") <- factor(paste0(posbps[[i]], "$CORE.ENRICHMENT"))
# assign (name, filter(name, CORE.ENRICHMENT == "Yes"))
}
for(i in c(1:length(posbps))){
name <- posbps[i]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
assign(paste0(posbps[[i]], "$CORE.ENRICHMENT") <- factor(paste0(posbps[[i]], "$CORE.ENRICHMENT")))
# assign (name, filter(name, CORE.ENRICHMENT == "Yes"))
}
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
# assign (name, filter(name, CORE.ENRICHMENT == "Yes"))
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\GSEA_results\\")
pos = read.csv("pos.csv", header = TRUE)
posfwer <- filter(pos, FWER.p.val < 0.05)
posbps <- paste(posfwer$NAME)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t"))
# assign (name, filter(name, CORE.ENRICHMENT == "Yes"))
}
View(GOBP_URONIC_ACID_METABOLIC_PROCESS)
View(GOBP_CELLULAR_GLUCURONIDATION)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", row.names = 1, colClasses = c('character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
}
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
}
View(GOBP_CELLULAR_GLUCURONIDATION)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
assign (name, filter(name$CORE.ENRICHMENT = "Yes"))
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
assign (name$CORE.ENRICHMENT, filter(name$CORE.ENRICHMENT = "Yes"))
lapply(posbps, filter(posbps, CORE.ENRICHMENT = "Yes"))
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
lapply(name, filter(name, CORE.ENRICHMENT = "Yes"))
}
View(GOBP_ESTROGEN_METABOLIC_PROCESS)
?lapply
n <- length(posbps)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
}
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
list <- list(name)
}
View(list)
poslist <- list(posbps)
for (i in 1:length(poslist)){
list <- poslist[[i]]
list <- filter(list, CORE.ENRICHMENT = "Yes")
}
poslist <- list(posbps)
for (i in 1:length(poslist)){
list <- poslist[[i]]
list$CORE.ENRICHMENT <- factor(list$CORE.ENRICHMENT)
list <- filter(list, CORE.ENRICHMENT = "Yes")
}
poslist <- list(posbps)
for (i in 1:length(poslist)){
list <- poslist[[i]]
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list <- filter(list, CORE.ENRICHMENT = "Yes")
}
list2env(posbps, .GlobalEnv)
list2env(poslist, .GlobalEnv)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
poslist <- (mget(ls(name)))
}
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t", colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')))
}
poslist <- mget(ls(posbps))
View(GOBP_CYTOPLASMIC_TRANSLATION)
poslist <- mget(ls(pattern = "GOBP_"))
View(poslist)
poslist$CORE.ENRICHMENT <- factor(poslist$CORE.ENRICHMENT)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t",
# colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')
))
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\GSEA_results\\")
pos = read.csv("pos.csv", header = TRUE)
posfwer <- filter(pos, FWER.p.val < 0.05)
posbps <- paste(posfwer$NAME)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t",
# colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')
))
}
View(GOBP_CELLULAR_GLUCURONIDATION)
poslist <- mget(ls(pattern = "GOBP_"))
poslist$CORE.ENRICHMENT <- factor(poslist$CORE.ENRICHMENT)
View(GOBP_ESTROGEN_METABOLIC_PROCESS)
new_data <- lapply(poslist, function(go)filter(go, factor(CORE.ENRICHMENT) = "Yes"))
new_data <- lapply(poslist, function(go)filter(go, (factor(CORE.ENRICHMENT) = "Yes"))))
new_data <- lapply(poslist, function(go)filter(go, (factor(CORE.ENRICHMENT) == "Yes"))))
for (i in 1:length(poslist)){
list <- poslist[[i]]
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list <- filter(list, CORE.ENRICHMENT = "Yes")
}
for (i in 1:length(poslist)){
list <- poslist[[i]]
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list <- filter(list, CORE.ENRICHMENT == "Yes")
}
View(poslist)
poslist <- mget(ls(pattern = "GOBP_"))
for (i in 1:length(poslist)){
list <- poslist[[i]]
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list <- filter(list, CORE.ENRICHMENT == "Yes")
}
View(GOBP_CELLULAR_GLUCURONIDATION)
list2env(poslist, .GlobalEnv)
View(GOBP_URONIC_ACID_METABOLIC_PROCESS)
View(poslist)
View(GOBP_CELLULAR_GLUCURONIDATION)
View(list)
for (i in 1:length(poslist)){
list <- poslist[[i]]
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
assign (list, filter(list, CORE.ENRICHMENT == "Yes"))
}
for (i in 1:length(poslist)){
list <- poslist[[i]]
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
poslist[[i]]$CORE.ENRICHMENT <- filter(poslist[[i]], CORE.ENRICHMENT == "Yes")
}
for (i in 1:length(poslist)){
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list <- filter(poslist[[i]], CORE.ENRICHMENT == "Yes")
}
for (i in 1:length(poslist)){
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list[[i]] <- filter(poslist[[i]], CORE.ENRICHMENT == "Yes")
}
for (i in 1:length(poslist)){
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
posbps[[i]] <- filter(poslist[[i]], CORE.ENRICHMENT == "Yes")
}
for (i in 1:length(poslist)){
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list <- filter(poslist[[i]], CORE.ENRICHMENT == "Yes")
}
list2env(list, .GlobalEnv)
View(GOBP_URONIC_ACID_METABOLIC_PROCESS)
View(list)
for (i in 1:length(poslist)){
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
list <- filter(poslist[[i]], CORE.ENRICHMENT == "Yes")
list2env(list, .GlobalEnv)
}
View(GOBP_URONIC_ACID_METABOLIC_PROCESS)
for (i in 1:length(poslist)){
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
poslist[[i]] <- poslist[[i]] %>% filter(poslist[[i]], CORE.ENRICHMENT == "Yes")
}
for (i in 1:length(poslist)){
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
assign(poslist[[i]] %>% filter(poslist[[i]], CORE.ENRICHMENT == "Yes"))
}
View(GOBP_CELLULAR_GLUCURONIDATION)
View(poslist)
View(GOBP_CELLULAR_GLUCURONIDATION)
for (i in 1:length(poslist)){
assign(poslist[[i]], select(poslist[[i]], contains(c("SYMBOL", "CORE.ENRICHMENT"))))
poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
# assign(poslist[[i]] %>% filter(poslist[[i]], CORE.ENRICHMENT == "Yes"))
}
for (i in 1:length(poslist)){
assign(poslist[[i]], select(poslist[[i]], contains(c("SYMBOL", "CORE.ENRICHMENT"))))
# poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
# assign(poslist[[i]] %>% filter(poslist[[i]], CORE.ENRICHMENT == "Yes"))
}
for (i in 1:length(poslist)){
return(poslist[[i]])
# assign(poslist[[i]], select(poslist[[i]], contains(c("SYMBOL", "CORE.ENRICHMENT"))))
# poslist[[i]]$CORE.ENRICHMENT <- factor(poslist[[i]]$CORE.ENRICHMENT)
# assign(poslist[[i]] %>% filter(poslist[[i]], CORE.ENRICHMENT == "Yes"))
}
View(poslist)
for(i in c(1:length(posbps))){
name <- posbps[[i]]
dat <- assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t",
# colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')
))
}
View(dat)
postsv <- paste0(posbps, ".tsv")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\GSEA_results\\")
pos = read.csv("pos.csv", header = TRUE)
posfwer <- filter(pos, FWER.p.val < 0.05)
posbps <- paste(posfwer$NAME)
postsv <- paste0(posbps, ".tsv")
dat <- lapply(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", postsv), read.csv)
View(dat)
?lapply
View(pos)
View(dat)
dat <- lapply(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", postsv), read.csv(sep = "\t", name = postsv))
dat <- lapply(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", postsv), read.csv(sep = "\t"))
dat <- lapply(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", postsv), read.csv, logic = c(sep = "\t"))
dat <- lapply(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", postsv), read.tsv)
dat <- lapply(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", postsv), read.csv)
View(dat)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\GSEA_results\\")
pos = read.csv("pos.csv", header = TRUE)
posfwer <- filter(pos, FWER.p.val < 0.05)
posbps <- paste(posfwer$NAME)
postsv <- paste0(posbps, ".tsv")
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t",
colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')
))
}
View(GOBP_PROTEIN_FOLDING)
dat <- for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t",
colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')
))
}
hm01 <- GOBP_ESTROGEN_METABOLIC_PROCESS
View(hm01)
hm01 <- select(GOBP_ESTROGEN_METABOLIC_PROCESS, contains("SYMBOL", "CORE.ENRICHMENT")
hm01 <- select(GOBP_ESTROGEN_METABOLIC_PROCESS, contains("SYMBOL", "CORE.ENRICHMENT"))
hm01 <- select(GOBP_ESTROGEN_METABOLIC_PROCESS, contains("SYMBOL", "CORE.ENRICHMENT"))
hm01 <- select(GOBP_ESTROGEN_METABOLIC_PROCESS, SYMBOL:CORE.ENRICHMENT)
View(hm01)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\GSEA_results\\")
pos = read.csv("pos.csv", header = TRUE)
posfwer <- filter(pos, FWER.p.val < 0.05)
posbps <- paste(posfwer$NAME)
postsv <- paste0(posbps, ".tsv")
for(i in c(1:length(posbps))){
name <- posbps[[i]]
assign (name, read.csv(paste0("C:\\GitHub\\dnFGFR\\my_analysis.GseaPreranked.1667342500005\\", posbps[i], ".tsv"), sep = "\t",
colClasses = c('character','character', 'numeric', 'numeric', 'numeric', 'factor', 'factor')
))
}
hm01 <- select(GOBP_ESTROGEN_METABOLIC_PROCESS, SYMBOL:CORE.ENRICHMENT)
View(hm01)
hm01 <- select(GOBP_ESTROGEN_METABOLIC_PROCESS, matches(c("SYMBOL", "CORE.ENRICHMENT")))
View(hm01)
norm <- read.csv("C:\\GitHub\\dnFGFR\\deseq_outputs\\effect_housing_dnFGFR_res\\normCounts.csv")
View(norm)
norm <- read.csv("C:\\GitHub\\dnFGFR\\deseq_outputs\\effect_housing_dnFGFR_res\\normCounts.csv", row.names = 1)
normd <- select(norm, contains("D"))
View(normd)
normds <- select(normd, contains("S"))
normdo <- select(normd, contains("O"))
View(normdo)
View(normds)
View(normdo)
hm01$CORE.ENRICHMENT <- factor(hm01$CORE.ENRICHMENT)
hm01 <- filter(hm01, CORE.ENRICHMENT = "Yes")
hm01 <- filter(hm01, CORE.ENRICHMENT == "Yes")
# Second round of dnFGFR OS sequencing. Animals were either OS or SS housed for 140 or 320 days.
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
outdir <- "C:\\GitHub\\dnFGFR\\deseq_outputs\\"
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(ComplexHeatmap)
#library(DEGreport)
library(vsn)
library(rrcov)
library(sva)
library(circlize)
library(enrichplot)
counts = read.csv("Rsub_less_id.coverage.csv", header=TRUE, row.names = 1)
colnames(counts) <- sub(".bam", "", colnames(counts))
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN140",  "PN320"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN140_same", "PN140_opposite","PN320_same", "PN320_opposite"))
#coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
threshold <- 0.05
coldataedit <- coldata %>% filter(time == "PN320")
removesamples <- c("PN140CS2", "PN140CS4", "PN140DS1", "PN320DO5")
coldataedit <- coldataedit %>% filter(!sampleName %in% removesamples)
countedit <- counts %>% select(coldataedit$sampleName)
dds = DESeqDataSetFromMatrix(countData = countedit, colData = coldataedit, design = ~genotype + housing + genotype:housing)
dds = DESeq(dds)
plotDispEsts(dds)
effect_housing_control_res <- results(dds, contrast = c("housing", "opposite", "same"))
effect_housing_dnFGFR_res <- results(dds, list(c("housing_opposite_vs_same", "genotypednFGFR.housingopposite")))
threshold = 0.1
summary(effect_housing_control_res, alpha = threshold)
plotMA(effect_housing_control_res, alpha = threshold)
summary(effect_housing_dnFGFR_res, alpha = threshold)
plotMA(effect_housing_dnFGFR_res, alpha = threshold)
effect_housing_dnFGFR_res[order(effect_housing_dnFGFR_res$padj), ]
effect_housing_control_res[order(effect_housing_control_res$padj), ]
plotCounts(dds, gene = "Drd3", intgroup = c("genotype", "housing"))
hist(effect_housing_control_res$pvalue, breaks = 200)
hist(effect_housing_control_res$padj, breaks = 100)
hist(effect_housing_dnFGFR_res$pvalue, breaks = 200)
hist(effect_housing_dnFGFR_res$padj, breaks = 100)
plotCounts(dds, gene = "Acaa1b", intgroup = c("genotype", "housing"))
normed = counts(dds, normalized=TRUE)
# write.csv(normed, file="normCounts.csv")
siggenes <- rownames(effect_housing_dnFGFR_res)
normedsig <- as.data.frame(normed) %>% filter(rownames(normed) %in% siggenes)
rowSigma <- apply(normedsig, 1, sd, na.rm = TRUE)
rowMu <- rowMeans(normedsig, na.rm = TRUE)
zscore_norm_expression <- (normedsig - rowMu) / rowSigma
zhm01 <- as.data.frame(zscore_norm_expression) %>% filter(rownames(zscore_norm_expression) %in% hm01$SYMBOL)
View(zhm01)
hm01 <- GOBP_ESTROGEN_METABOLIC_PROCESS %>% select(SYMBOL, CORE.ENRICHMENT)
hm01$CORE.ENRICHMENT <- factor(hm01$CORE.ENRICHMENT)
hm01 <- filter(hm01, CORE.ENRICHMENT == "Yes")
zhm01 <- as.data.frame(zscore_norm_expression) %>% filter(rownames(zscore_norm_expression) %in% hm01$SYMBOL)
View(zhm01)
hm01 <- GOBP_ESTROGEN_METABOLIC_PROCESS %>% select(SYMBOL, CORE.ENRICHMENT)
hm01$CORE.ENRICHMENT <- factor(hm01$CORE.ENRICHMENT)
hm01 <- filter(hm01, CORE.ENRICHMENT == "Yes")
zhm01 <- as.data.frame(zscore_norm_expression) %>% filter(rownames(zscore_norm_expression) %in% hm01$SYMBOL)
col_fun = circlize::colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
hm01_strength <- Heatmap(name = "zscore", as.matrix(zhm01),
cluster_columns = FALSE,
col = col_fun,
row_names_gp = gpar(fontsize = 8),
row_title_rot = 90,
column_title_side = "bottom",
column_names_rot = 45,
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4))),
#        show_row_dend = FALSE,
#        show_column_dend = FALSE,
)
hm01_strength
View(zscore_norm_expression)
zscoredn <- zscore_norm_expression %>% select(contains("D"))
View(zscoredn)
zhm01 <- as.data.frame(zscoredn) %>% filter(rownames(zscoredn) %in% hm01$SYMBOL)
hm01 <- GOBP_ESTROGEN_METABOLIC_PROCESS %>% select(SYMBOL, CORE.ENRICHMENT)
hm01$CORE.ENRICHMENT <- factor(hm01$CORE.ENRICHMENT)
hm01 <- filter(hm01, CORE.ENRICHMENT == "Yes")
zhm01 <- as.data.frame(zscoredn) %>% filter(rownames(zscoredn) %in% hm01$SYMBOL)
col_fun = circlize::colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
hm01_strength <- Heatmap(name = "zscore", as.matrix(zhm01),
cluster_columns = FALSE,
col = col_fun,
row_names_gp = gpar(fontsize = 8),
row_title_rot = 90,
column_title_side = "bottom",
column_names_rot = 45,
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4))),
#        show_row_dend = FALSE,
#        show_column_dend = FALSE,
)
hm01_strength
?heatmap
hm01_strength <- Heatmap(name = "zscore", as.matrix(zhm01),
cluster_columns = FALSE,
col = col_fun,
row_names_gp = gpar(fontsize = 8),
row_title_rot = 90,
column_title_side = "bottom",
column_names_rot = 90,
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4))),
#        show_row_dend = FALSE,
#        show_column_dend = FALSE,
)
hm01_strength
hm01_strength <- Heatmap(name = "zscore", as.matrix(zhm01),
cluster_columns = FALSE,
col = col_fun,
row_names_gp = gpar(fontsize = 8),
row_title_rot = 90,
column_title_side = "bottom",
column_names_rot = 90,
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4))),
main = "Estrogen Metabolic Process"
#        show_row_dend = FALSE,
#        show_column_dend = FALSE,
)
hm01_strength <- Heatmap(name = "zscore", as.matrix(zhm01),
cluster_columns = FALSE,
col = col_fun,
row_names_gp = gpar(fontsize = 8),
row_title_rot = 90,
column_title_side = "bottom",
column_names_rot = 90,
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4))),
main = "Estrogen Metabolic Process",
#        show_row_dend = FALSE,
#        show_column_dend = FALSE,
)
hm01_strength <- Heatmap(name = "zscore", as.matrix(zhm01),
cluster_columns = FALSE,
col = col_fun,
row_names_gp = gpar(fontsize = 8),
row_title_rot = 90,
column_title_side = "bottom",
column_names_rot = 90,
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4))),
xlab = "Estrogen Metabolic Process",
#        show_row_dend = FALSE,
#        show_column_dend = FALSE,
)
hm01_strength <- Heatmap(name = "zscore", as.matrix(zhm01),
cluster_columns = FALSE,
col = col_fun,
row_names_gp = gpar(fontsize = 8),
row_title_rot = 90,
column_title_side = "bottom",
column_names_rot = 90,
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4))),
#        show_row_dend = FALSE,
#        show_column_dend = FALSE,
)
hm01_strength
?rowMeans
?apply
