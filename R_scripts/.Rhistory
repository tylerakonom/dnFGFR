ALLOW_WGCNA_THREADS=8
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
#counts['Length'] = NULL
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
coldata_sort <-coldata[order(coldata$sample),]
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design= ~housing)
rld <- rlog(dds, blind=FALSE)
View(coldata)
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
library(edgeR)
knitr::opts_chunk$set(echo = TRUE)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
y <- DGEList(counts = counts_sort, group = coldata_sort)
View(coldata_sort)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
y <- DGEList(counts = counts_sort, group = coldata_sort$group)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
groups <- coldata
design <- (~ time + genotype + housing)
fit <- glm
groups <- coldata
design <- (~ time + genotype + housing)
fit <- glmFit(y, design)
View(y)
y <- DGEList(counts = counts_sort, group = coldata)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
y <- DGEList(counts = counts_sort, group = coldata_sort)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
y <- DGEList(counts = counts_sort, group = coldata_sort$group)
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
library(edgeR)
knitr::opts_chunk$set(echo = TRUE)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
y <- DGEList(counts = counts_sort, group = coldata_sort$group)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
View(counts_sort)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
library(edgeR)
knitr::opts_chunk$set(echo = TRUE)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
y <- DGEList(counts = counts_sort, group = coldata_sort$group, genes = rownames(counts_sort))
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
head(y$counts)
countsPerMillion <- cpm(y)
summary(countsPerMillion)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
dgList <- DGEList(counts = counts_sort, group = coldata_sort$group, genes = rownames(counts_sort))
countsPerMillion <- cpm(dgList)
countCheck <- countsPerMillion > 1
head(countCheck)
keep <- which(rowSums(countCheck) >= 2)
dgList <- dgList[keep,]
summary(cpm(dgList)) #compare this to the original summary
summary(countsPerMillion)
dgList <- calcNormFactors(dgList, method="TMM")
?calcNormFactors
plotMDS(dgList)
design <- model.matrix(~0+group, data=dgList$samples)
colnames(design) <- levels(dgList$samples$group)
design
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
library(edgeR)
knitr::opts_chunk$set(echo = TRUE)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
counts_sort <- counts[,order(colnames(counts))]
coldata_sort <-coldata[order(coldata$sample),]
y <- DGEList(counts = counts_sort, group = coldata_sort$group, genes = rownames(counts_sort))
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
design <- model.matrix(~0+group, data=y$samples)
colnames(design) <- levels(y$samples$group)
design
fit <- glmQLFit(y, design)
View(y)
design <- model.matrix(~0+group, data=y$samples)
colnames(design) <- levels(y$samples$group)
# design
y <- estimateDisp(y, design)
View(y)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
topTags(qlf)
?write.csv2
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
res <- topTags(qlf)
write.csv(as.data.frame(res), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
res <- qlf
write.csv(as.data.frame(res), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
View(qlf)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
res <- qlf
res <- rownames(qlf$genes)
write.csv(as.data.frame(res), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
res <- qlf
rownames(res) <- qlf$genes
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
res <- as.data.frame(qlf)
rownames(res) <- qlf$genes
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
res <- as.data.frame(qlf)
write.csv(as.data.frame(res), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
topTags(qlf)
View(res)
res$FDR <- qlf$FDR
write.csv(as.data.frame(res), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
write.csv(as.data.frame(res), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
topTags(qlf)
View(qlf)
View(qlf)
hist(qlf$table$PValue)
?p.adjust
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
output <- qlf
output$FDR <- p.adjust(qlf$table$PValue, "fdr")
write.csv(as.data.frame(res), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
output <- qlf
output$FDR <- p.adjust(qlf$table$PValue, "fdr")
write.csv(as.data.frame(output), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
View(output)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, contrast=c(0, 0, 0, 0, 1, 0, -1, 0))
output <- qlf
output$table$FDR <- p.adjust(qlf$table$PValue, "fdr")
write.csv(as.data.frame(output), file  ="C:\\GitHub\\dnFGFR\\edgeR_outputs\\pn140\\dnFGFR\\pn140_housing_results.csv")
hist(output$table$FDR)
View(design)
summary(decideTests(qlf))
((qlf))
plotMD(qlf)
abline(h=c(-1, 1), col="blue")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
rld <- rlog(dds, blind=FALSE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
library("vsn")
pdf("sdplot_shiftedLogtransformed.pdf")
meanSdPlot(assay(ntd))
dev.off()
pdf("sdplot_regLogtransformed.pdf")
meanSdPlot(assay(rld))
dev.off()
pdf("sdplot_varstabilizedtransformed.pdf")
meanSdPlot(assay(vst))
dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
rld <- rlog(dds, blind=FALSE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
library("vsn")
pdf("sdplot_shiftedLogtransformed.pdf")
meanSdPlot(assay(ntd))
dev.off()
pdf("sdplot_regLogtransformed.pdf")
meanSdPlot(assay(rld))
dev.off()
pdf("sdplot_varstabilizedtransformed.pdf")
meanSdPlot(assay(vst))
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd))
plotPCA(rld, intgroup=c("housing"))
sampleDists <- dist(t(assay(ntd))
plotPCA(rld, intgroup=c("genotype"))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd))
plotPCA(rld, intgroup=c("housing"))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("housing"))
dev.off()
pdf("day_PCA.pdf")
sampleDists <- dist(t(assay(vst)))
plotPCA(rld, intgroup=c("time"))
dev.off()
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
plotPCA(rld, intgroup=c("time"))
plotPCA(rld, intgroup=c("sampleName"))
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ sampleName + housing)
View(PN140DNcounts)
View(PN140DNcoldata)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~sampleName + time + housing)
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("dn_housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="dn_PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="dn_PN140_housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("dn_PN140_housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$pvalue
)
hist(res$padj)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\housing-gen\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~genotype + housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("housing-gen_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="PN140_housing-gen_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("PN140_housing-gen_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$pvalue)
hist(res$padj)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\genotype-housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~ housing + genotype)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("genotype-housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="PN140_genotype-housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("PN140_genotype-housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\housing-genotype-time\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + time + housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("housing-genotype-time_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_housing-genotype-time_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_housing-genotype-time_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$pvalue)
hist(res$padj)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\genotype-time-housing\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ time + housing + genotype)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("genotype-time-housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_genotype-time-housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_genotype-time-housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
