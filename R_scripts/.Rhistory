#
# PN140SScounts <- select(PN140counts, contains(c("B1116","B1117","B1118","B1119","B1120","B2111","B2112","B2113","B2114","B2115")))
# PN140SScoldata <- filter(PN140coldata, housing =="same")
# PN140SScoldata['time'] = NULL
#
# PN60counts <- select(counts, contains("A"))
# PN60coldata <- filter(coldata, time=="PN60")
# PN60DNcounts <- select(PN60counts, contains("A2"))
# PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
# PN60DNcoldata['time'] = NULL
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~dod)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_DOD.pdf")
# plotPCA(ntd, intgroup=c("dod"))
# dev.off()
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~parent)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_Parent.pdf")
# plotPCA(ntd, intgroup=c("parent"))
# dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# plotCounts(dds, gene = "", intgroup = "timehousing")
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE)
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(mininormed, Colv = NA, main=title)
dev.off()
minisig140 <- select(as.data.frame(normed), contains("B"))
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(as.vector(go_crtbs$MGI.Gene.Marker.ID))),]
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE)
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(mininormed, Colv = NA, main=title)
dev.off()
minisig140 <- select(as.data.frame(normed), contains("B"))
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(siggenes)),]
minisig140 <- as.matrix(minisig140)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response_sig.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(minisig140, Colv = NA, main=title)
minisig140
heatmap(mininormed, Colv = NA, main=title)
mininormed
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# plotCounts(dds, gene = "", intgroup = "timehousing")
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
# require(dplyr)
# PN140counts <- select(counts, contains("B"))
# PN140coldata <- filter(coldata, time=="PN140")
# PN140DNcounts <- select(PN140counts, contains("B2"))
# PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
# PN140DNcoldata['time'] = NULL
#
# PN140Ctrlcounts <- select(PN140counts, contains("B1"))
# PN140Ctrlcoldata <- filter(PN140coldata, genotype =="ctrl")
# PN140Ctrlcoldata['time'] = NULL
#
# PN140SScounts <- select(PN140counts, contains(c("B1116","B1117","B1118","B1119","B1120","B2111","B2112","B2113","B2114","B2115")))
# PN140SScoldata <- filter(PN140coldata, housing =="same")
# PN140SScoldata['time'] = NULL
#
# PN60counts <- select(counts, contains("A"))
# PN60coldata <- filter(coldata, time=="PN60")
# PN60DNcounts <- select(PN60counts, contains("A2"))
# PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
# PN60DNcoldata['time'] = NULL
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~dod)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_DOD.pdf")
# plotPCA(ntd, intgroup=c("dod"))
# dev.off()
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~parent)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_Parent.pdf")
# plotPCA(ntd, intgroup=c("parent"))
# dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# plotCounts(dds, gene = "", intgroup = "timehousing")
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
siggenes
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE)
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
mininormed
View(go_air)
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE)
View(go_air)
View(go_air)
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE, quote = "")
View(go_air)
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE, quote = "")
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(mininormed, Colv = NA, main=title)
dev.off()
minisig140 <- select(as.data.frame(normed), contains("B"))
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(siggenes)),]
minisig140 <- as.matrix(minisig140)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response_sig.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(minisig140, Colv = NA, main=title)
dev.off()
minisig60 <- select(as.data.frame(normed), contains("A"))
minisig60 <- minisig60[noquote(rownames(minisig60)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
minisig60 <- minisig60[noquote(rownames(minisig60)) %in% noquote(unique(siggenes)),]
minisig60 <- as.matrix(minisig60)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response_sig60.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(minisig60, Colv = NA, main=title)
dev.off()
# write.table(normcounts_group,paste0(outdir,outfilename,"/",'cluster',i,'.txt', sep=""), sep="\t",append = FALSE, quote = FALSE)}
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE, quote = "")
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response.png", width = 12, height = 12, units = "in", res = 800, bg= "white")
heatmap(mininormed, Colv = NA, main=title)
dev.off()
minisig140 <- select(as.data.frame(normed), contains("B"))
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(siggenes)),]
minisig140 <- as.matrix(minisig140)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response_sig.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(minisig140, Colv = NA, main=title)
dev.off()
minisig60 <- select(as.data.frame(normed), contains("A"))
minisig60 <- minisig60[noquote(rownames(minisig60)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
minisig60 <- minisig60[noquote(rownames(minisig60)) %in% noquote(unique(siggenes)),]
minisig60 <- as.matrix(minisig60)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response_sig60.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(minisig60, Colv = NA, main=title)
dev.off()
# write.table(normcounts_group,paste0(outdir,outfilename,"/",'cluster',i,'.txt', sep=""), sep="\t",append = FALSE, quote = FALSE)}
go_air <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\adaptive_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE, quote = "")
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response.png", width = 12, height = 12, units = "in", res = 800, bg= "white")
heatmap(mininormed, Colv = NA, main=title)
dev.off()
minisig140 <- select(as.data.frame(normed), contains("B"))
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
minisig140 <- minisig140[noquote(rownames(minisig140)) %in% noquote(unique(siggenes)),]
minisig140 <- as.matrix(minisig140)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response_sig.png", width = 12, height = 12, units = "in", res = 800, bg= "white")
heatmap(minisig140, Colv = NA, main=title)
dev.off()
minisig60 <- select(as.data.frame(normed), contains("A"))
minisig60 <- minisig60[noquote(rownames(minisig60)) %in% noquote(unique(as.vector(go_air$MGI.Gene.Marker.ID))),]
minisig60 <- minisig60[noquote(rownames(minisig60)) %in% noquote(unique(siggenes)),]
minisig60 <- as.matrix(minisig60)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Adaptive Immune Response"
png(filename = "adaptive_immune_response_sig60.png", width = 12, height = 12, units = "in", res = 800, bg= "NA")
heatmap(minisig60, Colv = NA, main=title)
dev.off()
# write.table(normcounts_group,paste0(outdir,outfilename,"/",'cluster',i,'.txt', sep=""), sep="\t",append = FALSE, quote = FALSE)}
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# plotCounts(dds, gene = "", intgroup = "timehousing")
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
rnkdf <- tibble(gene = rownames(res),
rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
arrange(desc(rnk)) %>% drop_na()
## Write out the table without any additional information
write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
# plotCounts(dds, gene = "", intgroup = "timehousing")
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
View(rnkdf)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
# require(dplyr)
# PN140counts <- select(counts, contains("B"))
# PN140coldata <- filter(coldata, time=="PN140")
# PN140DNcounts <- select(PN140counts, contains("B2"))
# PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
# PN140DNcoldata['time'] = NULL
#
# PN140Ctrlcounts <- select(PN140counts, contains("B1"))
# PN140Ctrlcoldata <- filter(PN140coldata, genotype =="ctrl")
# PN140Ctrlcoldata['time'] = NULL
#
# PN140SScounts <- select(PN140counts, contains(c("B1116","B1117","B1118","B1119","B1120","B2111","B2112","B2113","B2114","B2115")))
# PN140SScoldata <- filter(PN140coldata, housing =="same")
# PN140SScoldata['time'] = NULL
#
# PN60counts <- select(counts, contains("A"))
# PN60coldata <- filter(coldata, time=="PN60")
# PN60DNcounts <- select(PN60counts, contains("A2"))
# PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
# PN60DNcoldata['time'] = NULL
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~dod)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_DOD.pdf")
# plotPCA(ntd, intgroup=c("dod"))
# dev.off()
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~parent)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_Parent.pdf")
# plotPCA(ntd, intgroup=c("parent"))
# dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
rnkdf <- tibble(gene = rownames(res),
rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
arrange(desc(rnk)) %>% drop_na()
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
# plotCounts(dds, gene = "", intgroup = "timehousing")
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
View(rnkdf)
