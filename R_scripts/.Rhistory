dds = DESeqDataSetFromMatrix(countData = countdat, colData = PN140DNcoldata, design = ~ housing)
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("dn_housing_dispersionPlot.pdf")
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
countdat <- PN140DNcounts[,PN140DNcoldata$sampleName]
dds = DESeqDataSetFromMatrix(countData = countdat, colData = PN140DNcoldata, design = ~ housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("dn_housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="dn_PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="dn_PN140_housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("dn_PN140_housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
dds_lrt <- DESeq(dds, test="LRT", reduced = ~ 1)
normcounts <- as.data.frame(counts(dds_lrt, normalize=TRUE))
normcountslong <- normcounts %>% gather(key = "sample", value = "signal")
ggplot(normcountslong, aes(x = sample, y = signal))+ geom_violin(trim = FALSE) + theme(axis.text.x = element_text(angle = 90))+scale_y_continuous(trans='log2')
genename="Tnf"
normcounts[genename,]
plotCounts(dds_lrt, intgroup="housing",genename)
plotCounts(dds_lrt, intgroup="housing",genename)
PN140DNcounts <- PN140DNcounts[,PN140DNcoldata$sampleName]
View(PN140DNcounts)
View(PN140coldata)
counts <- counts[,coldata$sampleName]
View(counts)
View(coldata)
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
require(dplyr)
PN140counts <- select(counts, contains("B"))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
View(counts)
head(PN140counts)
head(PN140coldata)
head(PN140DNcounts)
head(PN140DNcoldata)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
dds = DESeqDataSetFromMatrix(countData = countdat, colData = PN140DNcoldata, design = ~ housing)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("dn_housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="dn_PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="dn_PN140_housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("dn_PN140_housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# plotCounts(dds,gene="Tnf",intgroup="housing")
plotCounts(dds,gene="Tnf",intgroup="housing")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
head(counts)
head(coldata)
coldata
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~housing)
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~housing)
# Set "reference" levels
dds$housing <- relevel(dds$housing, ref = "same")
# Run DESeq on the DESeq object
dds = DESeq(dds)
head(dds)
# Create DESeq object
dds1 = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~housing)
# Set "reference" levels
dds1$housing <- relevel(dds1$housing, ref = "same")
# Run DESeq on the DESeq object
dds1 = DESeq(dds1)
res140DN <- results(dds1)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
# Create DESeq object
dds1 = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~housing)
# Set "reference" levels
dds1$housing <- relevel(dds1$housing, ref = "same")
# Run DESeq on the DESeq object
dds1 = DESeq(dds1)
# Plot dispersions
pdf("PN140_housing_dispersionPlot.pdf")
plotDispEsts(dds1)
dev.off()
# Write out normalized counts
normed = counts(dds1, normalized=TRUE)
write.csv(normed, file="PN140DN_normCounts.csv")
# Write out results
res140DN <- results(dds1)
write.csv(as.data.frame(res140DN), file="PN140DN_housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN140DN_housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
# Create DESeq object
dds1 = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~housing)
# Set "reference" levels
dds1$housing <- relevel(dds1$housing, ref = "same")
# Run DESeq on the DESeq object
dds1 = DESeq(dds1)
# Plot dispersions
pdf("PN140_housing_dispersionPlot.pdf")
plotDispEsts(dds1)
dev.off()
# Write out normalized counts
normed = counts(dds1, normalized=TRUE)
write.csv(normed, file="PN140DN_normCounts.csv")
# Write out results
res140DN <- results(dds1)
write.csv(as.data.frame(res140DN), file="PN140DN_housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN140DN_housing_MAPlot.pdf")
DESeq2::plotMA(res140DN, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
head(res140DN)
normed1 = counts(dds1, normalized=TRUE)
write.csv(normed1, file="PN140DN_normCounts.csv")
head(normed1)
normed1[rownames(normed1)=="Tnf"]
dfres <- as.data.frame(res140DN)
dfres[rownames(dfres)=="Tnf"]
dfres[rownames(dfres)=="Tnf",]
colnames(normed1)
# Check individual genes
plotCounts(dds1,gene="Tnf",intgroup="housing")
# Create DESeq object
dds2 = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~genotype + housing)
View(PN140coldata)
# Set "reference" levels
dds2$housing <- relevel(dds2$housing, ref = "same")
dds2$genotype <- relevel(dds2$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds2 = DESeq(dds2)
head(PN140coldata)
head(PN140counts)
PN140coldata
colData(dds2)
# Write out results
res140 <- results(dds2)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\housing-gen\\")
# Create DESeq object
dds2 = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~genotype + housing)
# Set "reference" levels
dds2$housing <- relevel(dds2$housing, ref = "same")
dds2$genotype <- relevel(dds2$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds2 = DESeq(dds2)
res140 <- results(dds2)
# # Check individual genes
# plotCounts(dds2,gene="Tnf",intgroup="housing")
# Write out results
write.csv(as.data.frame(res140), file="PN140_housing-gen_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN140_housing-gen_MAPlot.pdf")
DESeq2::plotMA(res140, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed1 = counts(dds2, normalized=TRUE)
write.csv(normed1, file="PN140_normCounts.csv")
# Plot dispersions
pdf("PN140_housing-gen_dispersionPlot.pdf")
plotDispEsts(dds2)
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\genotype-housing\\")
# Create DESeq object
dds3 = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~housing + genotype)
# Set "reference" levels
dds3$housing <- relevel(dds3$housing, ref = "same")
dds3$genotype <- relevel(dds3$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds3 = DESeq(dds3)
res140h <- results(dds3)
# Check individual genes
plotCounts(dds3,gene="Tnf",intgroup="housing")
# Write out results
write.csv(as.data.frame(res140h), file="PN140_genotype-housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN140_genotype-housing_MAPlot.pdf")
DESeq2::plotMA(res140h, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed1 = counts(dds3, normalized=TRUE)
write.csv(normed1, file="PN140_normCounts.csv")
# Plot dispersions
pdf("PN140_genotype-housing_dispersionPlot.pdf")
plotDispEsts(dds3)
dev.off()
colData(dds3)
view(colData(dds3))
# Check individual genes
plotCounts(dds3,gene="Rnf122",intgroup="genotype")
dfres <- as.data.frame(res140h)
# # Write out results
# write.csv(as.data.frame(res140h), file="PN140_genotype-housing_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("PN140_genotype-housing_MAPlot.pdf")
# DESeq2::plotMA(res140h, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
normed3 = counts(dds3, normalized=TRUE)
normed3[rownames(normed3)=="Rnf122",]
hist(normed3[rownames(normed3)=="Rnf122",])
barplot(normed3[rownames(normed3)=="Rnf122",])
View(coldata)
View(counts)
# Create DESeq object
dds4 = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~housing + time + genotype)
# Set "reference" levels
dds4$housing <- relevel(dds4$housing, ref = "same")
dds4$genotype <- relevel(dds4$genotype, ref = "ctrl")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\genotype-time-housing\\")
# Create DESeq object
dds4 = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~housing + time + genotype)
# Set "reference" levels
dds4$housing <- relevel(dds4$housing, ref = "same")
dds4$genotype <- relevel(dds4$genotype, ref = "ctrl")
dds4$time <- relevel(dds4$time, ref = "PN60")
# Run DESeq on the DESeq object
dds4 = DESeq(dds4)
resallg <- results(dds4)
# Check individual genes
plotCounts(dds4,gene="Rnf122",intgroup="genotype")
# Write out results
write.csv(as.data.frame(resallg), file="all_genotype-housing-time_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("all_genotype-housing-time_MAPlot.pdf")
DESeq2::plotMA(resallg, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed4 = counts(dds4, normalized=TRUE)
write.csv(normed4, file="all_normCounts.csv")
# Plot dispersions
pdf("all_genotype-housing-time_dispersionPlot.pdf")
plotDispEsts(dds4)
dev.off()
head(resallg)
view(colData(dds4))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\housing-genotype-time\\")
# Create DESeq object
dds5 = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~genotype + time + housing)
# Set "reference" levels
dds5$housing <- relevel(dds5$housing, ref = "same")
dds5$genotype <- relevel(dds5$genotype, ref = "ctrl")
dds5$time <- relevel(dds5$time, ref = "PN60")
# Run DESeq on the DESeq object
dds5 = DESeq(dds5)
resallh <- results(dds5)
# # Check individual genes
# plotCounts(dds5,gene="Rnf122",intgroup="genotype")
# Write out results
write.csv(as.data.frame(resallh), file="all_housing-genotype-time_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("all_housing-genotype-time_MAPlot.pdf")
DESeq2::plotMA(resallh, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed5 = counts(dds5, normalized=TRUE)
write.csv(normed5, file="all_normCounts.csv")
# Plot dispersions
pdf("all_housing-genotype-time_dispersionPlot.pdf")
plotDispEsts(dds5)
dev.off()
view(colData(dds5))
require(dplyr)
PN60counts <- select(counts, contains("A"))
PN60coldata <- filter(coldata, time=="PN60")
PN60DNcounts <- select(PN60counts, contains("A2"))
PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
PN60DNcoldata['time'] = NULL
View(PN60coldata)
View(PN60counts)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN60\\dn_housing\\")
# Create DESeq object
dds6 = DESeqDataSetFromMatrix(countData = PN60DNcounts, colData = PN60DNcoldata, design = ~housing)
# Set "reference" levels
dds6$housing <- relevel(dds6$housing, ref = "same")
# Run DESeq on the DESeq object
dds6 = DESeq(dds6)
res60DN <- results(dds6)
# # Check individual genes
# plotCounts(dds6,gene="Tnf",intgroup="housing")
#
# Write out results
write.csv(as.data.frame(res60DN), file="PN60DN_housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN60DN_housing_MAPlot.pdf")
DESeq2::plotMA(res60DN, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed6 = counts(dds6, normalized=TRUE)
write.csv(normed6, file="PN60DN_normCounts.csv")
# Plot dispersions
pdf("PN60DN_housing_dispersionPlot.pdf")
plotDispEsts(dds6)
dev.off()
view(colData(dds6))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN60\\housing-gen\\")
# Create DESeq object
dds7 = DESeqDataSetFromMatrix(countData = PN60counts, colData = PN60coldata, design = ~genotype + housing)
# Set "reference" levels
dds7$housing <- relevel(dds7$housing, ref = "same")
dds7$genotype <- relevel(dds7$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds7 = DESeq(dds7)
res60h <- results(dds7)
# # Check individual genes
# plotCounts(dds7,gene="Tnf",intgroup="housing")
# Write out results
write.csv(as.data.frame(res60h), file="PN60_housing-gen_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN60_housing-gen_MAPlot.pdf")
DESeq2::plotMA(res60h, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed7 = counts(dds7, normalized=TRUE)
write.csv(normed7, file="PN60_normCounts.csv")
# Plot dispersions
pdf("PN60_housing-gen_dispersionPlot.pdf")
plotDispEsts(dds7)
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN60\\genotype-housing\\")
# Create DESeq object
dds8 = DESeqDataSetFromMatrix(countData = PN60counts, colData = PN60coldata, design = ~housing + genotype)
# Set "reference" levels
dds8$housing <- relevel(dds8$housing, ref = "same")
dds8$genotype <- relevel(dds8$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds8 = DESeq(dds8)
res60g <- results(dds8)
# # Check individual genes
# plotCounts(dds8,gene="Rnf122",intgroup="genotype")
# Write out results
write.csv(as.data.frame(res60g), file="PN60_genotype-housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN60_genotype-housing_MAPlot.pdf")
DESeq2::plotMA(res60g, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed8 = counts(dds8, normalized=TRUE)
write.csv(normed8, file="PN60_normCounts.csv")
# Plot dispersions
pdf("PN60_genotype-housing_dispersionPlot.pdf")
plotDispEsts(dds8)
dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\ss_genotype\\")
# Create DESeq object
dds10 = DESeqDataSetFromMatrix(countData = PN140SScounts, colData = PN140SScoldata, design = ~genotype)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
PN140Ctrlcounts <- select(PN140counts, contains("B1"))
PN140Ctrlcoldata <- filter(PN140coldata, genotype =="ctrl")
PN140Ctrlcoldata['time'] = NULL
PN140SScounts <- select(PN140counts, contains(c("B1116","B1117","B1118","B1119","B1120","B2111","B2112","B2113","B2114","B2115")))
PN140SScoldata <- filter(PN140coldata, housing =="same")
PN140SScoldata['time'] = NULL
PN60counts <- select(counts, contains("A"))
PN60coldata <- filter(coldata, time=="PN60")
PN60DNcounts <- select(PN60counts, contains("A2"))
PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
PN60DNcoldata['time'] = NULL
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\ss_genotype\\")
# Create DESeq object
dds10 = DESeqDataSetFromMatrix(countData = PN140SScounts, colData = PN140SScoldata, design = ~genotype)
# Set "reference" levels
# dds10$housing <- relevel(dds10$housing, ref = "same")
dds10$genotype <- relevel(dds10$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds10 = DESeq(dds10)
res140SS <- results(dds10)
normed10 = counts(dds10, normalized=TRUE)
# # Check individual genes
# plotCounts(dds10,gene="Ccl5",intgroup="housing")
# Write out results
# write.csv(as.data.frame(res140SS), file="PN140SS_genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("PN140SS_genotype_MAPlot.pdf")
# DESeq2::plotMA(res140SS, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed10, file="PN140SS_normCounts.csv")
#
# # Plot dispersions
# pdf("PN140SS_genotype_dispersionPlot.pdf")
# plotDispEsts(dds10)
# dev.off()
normed10[rownames(normed10)=="Gpnmb",]
barplot(normed10[rownames(normed10)=="Gpnmb",])
