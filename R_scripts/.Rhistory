meanSdPlot(assay(ntd))
dev.off()
pdf("sdplot_regLogtransformed.pdf")
meanSdPlot(assay(rld))
dev.off()
pdf("sdplot_varstabilizedtransformed.pdf")
meanSdPlot(assay(vst))
dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
rld <- rlog(dds, blind=FALSE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
library("vsn")
pdf("sdplot_shiftedLogtransformed.pdf")
meanSdPlot(assay(ntd))
dev.off()
pdf("sdplot_regLogtransformed.pdf")
meanSdPlot(assay(rld))
dev.off()
pdf("sdplot_varstabilizedtransformed.pdf")
meanSdPlot(assay(vst))
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd))
plotPCA(rld, intgroup=c("housing"))
sampleDists <- dist(t(assay(ntd))
plotPCA(rld, intgroup=c("genotype"))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd))
plotPCA(rld, intgroup=c("housing"))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("housing"))
dev.off()
pdf("day_PCA.pdf")
sampleDists <- dist(t(assay(vst)))
plotPCA(rld, intgroup=c("time"))
dev.off()
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
plotPCA(rld, intgroup=c("time"))
plotPCA(rld, intgroup=c("sampleName"))
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ sampleName + housing)
View(PN140DNcounts)
View(PN140DNcoldata)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~sampleName + time + housing)
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("dn_housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="dn_PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="dn_PN140_housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("dn_PN140_housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$pvalue
)
hist(res$padj)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\housing-gen\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~genotype + housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("housing-gen_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="PN140_housing-gen_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("PN140_housing-gen_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$pvalue)
hist(res$padj)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\genotype-housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~ housing + genotype)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("genotype-housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="PN140_genotype-housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("PN140_genotype-housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\housing-genotype-time\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + time + housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("housing-genotype-time_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_housing-genotype-time_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_housing-genotype-time_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$pvalue)
hist(res$padj)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\genotype-time-housing\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ time + housing + genotype)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("genotype-time-housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_genotype-time-housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_genotype-time-housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
require(dplyr)
counts1hr <- select(counts, contains("1h"))
coldata1hr <- filter(coldata, time=="1hr")
coldata1hr['time'] = NULL
counts6hr <- select(counts, contains("6h"))
coldata6hr <- filter(coldata, time=="6hr")
coldata6hr['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ mouse + treatment)
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ treatment)
View(counts)
rld <- rlog(dds, blind=FALSE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
setwd("C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\pdfs\\")
library("vsn")
pdf("sdplot_shiftedLogtransformed.pdf")
meanSdPlot(assay(ntd))
dev.off()
pdf("sdplot_s6hr_regLogtransformed.pdf")
meanSdPlot(assay(rld))
dev.off()
pdf("sdplot_s6hr_varstabilizedtransformed.pdf")
meanSdPlot(assay(vst))
dev.off()
setwd("C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\pdfs\\")
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("treatment"))
dev.off()
pdf("time_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("time"))
dev.off()
plotPCA(rld, intgroup=c("treatment"))
plotPCA(rld, intgroup=c("mouse"))
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ mouse + treatment)
#Designate File Output
setwd("C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\6hr\\")
dds = DESeqDataSetFromMatrix(countData = counts6hr, colData = coldata6hr, design = ~  mouse + treatment)
#remove low count genes (anything less than 20 reads)
# keep <- rowSums(counts(dds)) >= 20
# dds <- dds[keep,]
#set comparison level,
dds$treatment <- relevel(dds$treatment, ref = "untreated")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("treatment_dispersionPlot.pdf")
plotDispEsts(dds)
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="6hr_normalized_counts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="6hr_treatment_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("6hr_treatment_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.01, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate File Output
setwd("C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\1hr\\")
dds = DESeqDataSetFromMatrix(countData = counts1hr, colData = coldata1hr, design = ~ mouse + treatment)
#remove low count genes (anything less than 20 reads)
# keep <- rowSums(counts(dds)) >= 20
# dds <- dds[keep,]
#set comparison level,
dds$treatment <- relevel(dds$treatment, ref = "untreated")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("treatment_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="1hr_normalized_counts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="1hr_treatment_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("1hr_treatment_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.01, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate File Output
setwd("C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\6hr\\")
dds = DESeqDataSetFromMatrix(countData = counts6hr, colData = coldata6hr, design = ~  mouse + treatment)
#remove low count genes (anything less than 20 reads)
# keep <- rowSums(counts(dds)) >= 20
# dds <- dds[keep,]
#set comparison level,
dds$treatment <- relevel(dds$treatment, ref = "untreated")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
hist(res$pvalue)
View(counts)
hist(res$padj)
hist(res$pvalue)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
View(coldata)
plotPCA(rld, intgroup=c("housing"))
rld <- rlog(dds, blind=FALSE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(vsn)))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("housing"))
dev.off()
pdf("day_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("time"))
dev.off()
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
plotPCA(rld, intgroup=c("time"))
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
View(dds)
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
library("vsn")
meanSdPlot(assay(ntd))
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
View(counts)
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
plotPCA(ntd, intgroup=c("genotype"))
plotPCA(ntd, intgroup=c("housing"))
plotPCA(ntd, intgroup=c("sampleName"))
plotPCA(ntd, intgroup=c("housing"))
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~ housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
ntd <- normTransform(dds)
plotPCA(ntd, intgroup=c("genotype"))
plotPCA(ntd, intgroup=c("housing"))
plotPCA(ntd, intgroup=c("sampleName"))
plotPCA(ntd, intgroup=c("housing"))
plotPCA(ntd, intgroup=c("sampleName"))
#write out statistical results
res <- results(dds)
hist(res$pvalue)
hist(res$padj)
