# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
View(rnkdf)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~dod)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_DOD.pdf")
# plotPCA(ntd, intgroup=c("dod"))
# dev.off()
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~parent)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_Parent.pdf")
# plotPCA(ntd, intgroup=c("parent"))
# dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
# plotCounts(dds, gene = "", intgroup = "timehousing")
#
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
#
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Il6", intgroup = "timehousing")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~group)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds, contrast = c("group", "dnFGFR_PN140_same", "dnFGFR_PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Il6", intgroup = "group")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Il6", intgroup = "timehousing")
#
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
#
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\dn140\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~group)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds, contrast = c("group", "dnFGFR_PN140_same", "dnFGFR_PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Write out results
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\dn140\\")
# write.csv(as.data.frame(res), file="dn140_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\dn140\\")
# pdf("dn140_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
# # Write out normalized counts
# write.csv(normed4, file="all_normCounts.csv")
#
# # Plot dispersions
# pdf("all_genotype-housing-time_dispersionPlot.pdf")
# plotDispEsts(dds4)
# dev.off()
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Nhlh2", intgroup = "group")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~dod)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_DOD.pdf")
# plotPCA(ntd, intgroup=c("dod"))
# dev.off()
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~parent)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_Parent.pdf")
# plotPCA(ntd, intgroup=c("parent"))
# dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Gm11428", intgroup = "timehousing")
#
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
#
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
```{r}
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN60_opposite", "PN60_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Tnf", intgroup = "timehousing")
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Il1rn", intgroup = "timehousing")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~dod)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_DOD.pdf")
# plotPCA(ntd, intgroup=c("dod"))
# dev.off()
# dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~parent)
# ntd <- normTransform(dds)
# meanSdPlot(assay(ntd))
# sampleDists <- dist(t(assay(ntd)))
# pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\PCA\\PCA_Parent.pdf")
# plotPCA(ntd, intgroup=c("parent"))
# dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
# plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_opposite", "PN140_same"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Il1rn", intgroup = "timehousing")
#
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"png", sep = ".")
#   png(filename = n, width = 12, height = 12, units = "in", res = 800, bg= "NA")
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()}
#
# # Write out results
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed, file="normCounts.csv")
#
# # Plot dispersions
# pdf("timehousing-genotype_dispersionPlot.pdf")
# plotDispEsts(dds)
# dev.off()
counts[Il1rn,]
counts[,Il1rn]
View(counts)
normed[Il1rn,]
normed[,"Il1rn"]
normed["Il1rn",]
normed["Il12b",]
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Il12b", intgroup = "timehousing")
normed["Il1b",]
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Il1b", intgroup = "timehousing")
# # Generating a .rnk file for GSEA from results
# rnkdf <- tibble(gene = rownames(res),
# 				rnk = -log(res$pvalue) * sign(res$log2FoldChange)) %>%
# 	arrange(desc(rnk)) %>% drop_na()
#
## Write out the table without any additional information
# write.table(rnkdf, file = "deseq_res_for_gsea.rnk", append = FALSE, col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
#
plotCounts(dds, gene = "Cd69", intgroup = "timehousing")
