# Write out normalized counts
normed1 = counts(dds2, normalized=TRUE)
write.csv(normed1, file="PN140_normCounts.csv")
# Plot dispersions
pdf("PN140_housing-gen_dispersionPlot.pdf")
plotDispEsts(dds2)
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\genotype-housing\\")
# Create DESeq object
dds3 = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~housing + genotype)
# Set "reference" levels
dds3$housing <- relevel(dds3$housing, ref = "same")
dds3$genotype <- relevel(dds3$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds3 = DESeq(dds3)
res140h <- results(dds3)
# Check individual genes
plotCounts(dds3,gene="Tnf",intgroup="housing")
# Write out results
write.csv(as.data.frame(res140h), file="PN140_genotype-housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN140_genotype-housing_MAPlot.pdf")
DESeq2::plotMA(res140h, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed1 = counts(dds3, normalized=TRUE)
write.csv(normed1, file="PN140_normCounts.csv")
# Plot dispersions
pdf("PN140_genotype-housing_dispersionPlot.pdf")
plotDispEsts(dds3)
dev.off()
colData(dds3)
view(colData(dds3))
# Check individual genes
plotCounts(dds3,gene="Rnf122",intgroup="genotype")
dfres <- as.data.frame(res140h)
# # Write out results
# write.csv(as.data.frame(res140h), file="PN140_genotype-housing_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("PN140_genotype-housing_MAPlot.pdf")
# DESeq2::plotMA(res140h, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
normed3 = counts(dds3, normalized=TRUE)
normed3[rownames(normed3)=="Rnf122",]
hist(normed3[rownames(normed3)=="Rnf122",])
barplot(normed3[rownames(normed3)=="Rnf122",])
View(coldata)
View(counts)
# Create DESeq object
dds4 = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~housing + time + genotype)
# Set "reference" levels
dds4$housing <- relevel(dds4$housing, ref = "same")
dds4$genotype <- relevel(dds4$genotype, ref = "ctrl")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\genotype-time-housing\\")
# Create DESeq object
dds4 = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~housing + time + genotype)
# Set "reference" levels
dds4$housing <- relevel(dds4$housing, ref = "same")
dds4$genotype <- relevel(dds4$genotype, ref = "ctrl")
dds4$time <- relevel(dds4$time, ref = "PN60")
# Run DESeq on the DESeq object
dds4 = DESeq(dds4)
resallg <- results(dds4)
# Check individual genes
plotCounts(dds4,gene="Rnf122",intgroup="genotype")
# Write out results
write.csv(as.data.frame(resallg), file="all_genotype-housing-time_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("all_genotype-housing-time_MAPlot.pdf")
DESeq2::plotMA(resallg, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed4 = counts(dds4, normalized=TRUE)
write.csv(normed4, file="all_normCounts.csv")
# Plot dispersions
pdf("all_genotype-housing-time_dispersionPlot.pdf")
plotDispEsts(dds4)
dev.off()
head(resallg)
view(colData(dds4))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\housing-genotype-time\\")
# Create DESeq object
dds5 = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~genotype + time + housing)
# Set "reference" levels
dds5$housing <- relevel(dds5$housing, ref = "same")
dds5$genotype <- relevel(dds5$genotype, ref = "ctrl")
dds5$time <- relevel(dds5$time, ref = "PN60")
# Run DESeq on the DESeq object
dds5 = DESeq(dds5)
resallh <- results(dds5)
# # Check individual genes
# plotCounts(dds5,gene="Rnf122",intgroup="genotype")
# Write out results
write.csv(as.data.frame(resallh), file="all_housing-genotype-time_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("all_housing-genotype-time_MAPlot.pdf")
DESeq2::plotMA(resallh, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed5 = counts(dds5, normalized=TRUE)
write.csv(normed5, file="all_normCounts.csv")
# Plot dispersions
pdf("all_housing-genotype-time_dispersionPlot.pdf")
plotDispEsts(dds5)
dev.off()
view(colData(dds5))
require(dplyr)
PN60counts <- select(counts, contains("A"))
PN60coldata <- filter(coldata, time=="PN60")
PN60DNcounts <- select(PN60counts, contains("A2"))
PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
PN60DNcoldata['time'] = NULL
View(PN60coldata)
View(PN60counts)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN60\\dn_housing\\")
# Create DESeq object
dds6 = DESeqDataSetFromMatrix(countData = PN60DNcounts, colData = PN60DNcoldata, design = ~housing)
# Set "reference" levels
dds6$housing <- relevel(dds6$housing, ref = "same")
# Run DESeq on the DESeq object
dds6 = DESeq(dds6)
res60DN <- results(dds6)
# # Check individual genes
# plotCounts(dds6,gene="Tnf",intgroup="housing")
#
# Write out results
write.csv(as.data.frame(res60DN), file="PN60DN_housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN60DN_housing_MAPlot.pdf")
DESeq2::plotMA(res60DN, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed6 = counts(dds6, normalized=TRUE)
write.csv(normed6, file="PN60DN_normCounts.csv")
# Plot dispersions
pdf("PN60DN_housing_dispersionPlot.pdf")
plotDispEsts(dds6)
dev.off()
view(colData(dds6))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN60\\housing-gen\\")
# Create DESeq object
dds7 = DESeqDataSetFromMatrix(countData = PN60counts, colData = PN60coldata, design = ~genotype + housing)
# Set "reference" levels
dds7$housing <- relevel(dds7$housing, ref = "same")
dds7$genotype <- relevel(dds7$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds7 = DESeq(dds7)
res60h <- results(dds7)
# # Check individual genes
# plotCounts(dds7,gene="Tnf",intgroup="housing")
# Write out results
write.csv(as.data.frame(res60h), file="PN60_housing-gen_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN60_housing-gen_MAPlot.pdf")
DESeq2::plotMA(res60h, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed7 = counts(dds7, normalized=TRUE)
write.csv(normed7, file="PN60_normCounts.csv")
# Plot dispersions
pdf("PN60_housing-gen_dispersionPlot.pdf")
plotDispEsts(dds7)
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN60\\genotype-housing\\")
# Create DESeq object
dds8 = DESeqDataSetFromMatrix(countData = PN60counts, colData = PN60coldata, design = ~housing + genotype)
# Set "reference" levels
dds8$housing <- relevel(dds8$housing, ref = "same")
dds8$genotype <- relevel(dds8$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds8 = DESeq(dds8)
res60g <- results(dds8)
# # Check individual genes
# plotCounts(dds8,gene="Rnf122",intgroup="genotype")
# Write out results
write.csv(as.data.frame(res60g), file="PN60_genotype-housing_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("PN60_genotype-housing_MAPlot.pdf")
DESeq2::plotMA(res60g, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
normed8 = counts(dds8, normalized=TRUE)
write.csv(normed8, file="PN60_normCounts.csv")
# Plot dispersions
pdf("PN60_genotype-housing_dispersionPlot.pdf")
plotDispEsts(dds8)
dev.off()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\ss_genotype\\")
# Create DESeq object
dds10 = DESeqDataSetFromMatrix(countData = PN140SScounts, colData = PN140SScoldata, design = ~genotype)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
PN140Ctrlcounts <- select(PN140counts, contains("B1"))
PN140Ctrlcoldata <- filter(PN140coldata, genotype =="ctrl")
PN140Ctrlcoldata['time'] = NULL
PN140SScounts <- select(PN140counts, contains(c("B1116","B1117","B1118","B1119","B1120","B2111","B2112","B2113","B2114","B2115")))
PN140SScoldata <- filter(PN140coldata, housing =="same")
PN140SScoldata['time'] = NULL
PN60counts <- select(counts, contains("A"))
PN60coldata <- filter(coldata, time=="PN60")
PN60DNcounts <- select(PN60counts, contains("A2"))
PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
PN60DNcoldata['time'] = NULL
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\ss_genotype\\")
# Create DESeq object
dds10 = DESeqDataSetFromMatrix(countData = PN140SScounts, colData = PN140SScoldata, design = ~genotype)
# Set "reference" levels
# dds10$housing <- relevel(dds10$housing, ref = "same")
dds10$genotype <- relevel(dds10$genotype, ref = "ctrl")
# Run DESeq on the DESeq object
dds10 = DESeq(dds10)
res140SS <- results(dds10)
normed10 = counts(dds10, normalized=TRUE)
# # Check individual genes
# plotCounts(dds10,gene="Ccl5",intgroup="housing")
# Write out results
# write.csv(as.data.frame(res140SS), file="PN140SS_genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("PN140SS_genotype_MAPlot.pdf")
# DESeq2::plotMA(res140SS, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed10, file="PN140SS_normCounts.csv")
#
# # Plot dispersions
# pdf("PN140SS_genotype_dispersionPlot.pdf")
# plotDispEsts(dds10)
# dev.off()
normed10[rownames(normed10)=="Gpnmb",]
barplot(normed10[rownames(normed10)=="Gpnmb",])
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing)
View(coldata)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing)
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
plotCounts(dds,gene="Gpnmb",intgroup="timehousing")
rs <- as.data.frame(resSig)
neatgenes <- as.vector(rownames(rs))
for (genename in neatgenes){
plotCounts(dds,gene=genename,intgroup="timehousing")
}
# # Check individual genes
# plotCounts(dds4,gene="Rnf122",intgroup="genotype")
#
# # Write out results
# write.csv(as.data.frame(resallg), file="all_genotype-housing-time_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("all_genotype-housing-time_MAPlot.pdf")
# DESeq2::plotMA(resallg, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed4, file="all_normCounts.csv")
#
# # Plot dispersions
# pdf("all_genotype-housing-time_dispersionPlot.pdf")
# plotDispEsts(dds4)
# dev.off()
resSig
View(resSig)
row.names(resSig)
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~dod)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds)
plotDispEsts(dds)
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
plotDispEsts(dds)
meanSdPlot(res)
library(vsn)
library(vsn)
meanSdPlot(res)
meanSdPlot(assay(res))
plotPCA(dds, intgroup = "dod")
assay(dds)
sampleDists <- dist(t(assay(dds)))
plotPCA(dds, intgroup = "dod")
rld <- rlog(dds, blind=TRUE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
rld <- rlog(dds, blind=TRUE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
meanSdPlot(assay(rld))
meanSdPlot(assay(vst))
meanSdPlot(assay(ntd))
sampleDists <- dist(t(assay(ntd)))
plotPCA(ntd, intgroup=c("dod"))
sampleDists <- dist(t(assay(ntd)))
pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\outputs\\PCA_DOD.pdf")
sampleDists <- dist(t(assay(ntd)))
PCA <- plotPCA(ntd, intgroup=c("dod"))
pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\outputs\\PCA_DOD.pdf") <- PCA
sampleDists <- dist(t(assay(ntd)))
pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\figures\\PCA_DOD.pdf")
plotPCA(ntd, intgroup=c("dod"))
dev.off()
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~parent)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
sampleDists <- dist(t(assay(ntd)))
pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\figures\\PCA_Parent.pdf")
plotPCA(ntd, intgroup=c("parent"))
dev.off()
View(coldata)
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~genotype  + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
sum(res$padj < 0.05, na.rm = TRUE)
row.names(res)
resSig <- subset(res, padj < 0.05)
row.names(resSig)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
for (genename in neatgenes){
plotCounts(dds,gene=genename,intgroup="timehousing")
}
for (genename in neatgenes){
pdf(pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\figures\\[genename].pdf"))
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
for (genename in neatgenes){
pdf('C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\figures\\')
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
for (genename in neatgenes){
pdf("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\figures\\")
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\graphics\\")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
pdf(onefile = FALSE, title = genename)
for (genename in neatgenes){
plotCounts(dds,gene=genename,intgroup="timehousing")
}
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
pdf(onefile = FALSE, title = genename, "%genename.pdf")
pdf(file = genename".pdf", onefile = FALSE, title = genename)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
pdf(file = genename".pdf", onefile = FALSE, title = genename)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
pdf(file = genename, onefile = FALSE, title = genename)
for (genename in siggenes){
plotCounts(dds,gene=genename,intgroup="timehousing")
}
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
pdf(file = genename, onefile = FALSE, title = genename)
for (genename in siggenes){
plotCounts(dds,gene=genename,intgroup="timehousing")
}
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = genename, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = "(genename).pdf", onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = genename.pdf, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
q()
dev.off()
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
#
# # Write out normalized counts
# write.csv(normed4, file="all_normCounts.csv")
#
# # Plot dispersions
# pdf("all_genotype-housing-time_dispersionPlot.pdf")
# plotDispEsts(dds4)
# dev.off()
# jpeg(paste0(outdir,outfilename,"/",'cluster',i,'.jpg', sep=""))
heatmap(mininormed,Colv = NA, main=title)
plotCounts(dds,gene=genename,intgroup="timehousing")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = 'genename.pdf', onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
view(res)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = 'genename.pdf', onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = genename.pdf, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = genename".pdf", onefile = FALSE, title = genename)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
pdf(file = "%genename.pdf", onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
titles <- paste(genename, ".pdf")
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
n <- paste(genename,"pdf", sep = ".")
pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
