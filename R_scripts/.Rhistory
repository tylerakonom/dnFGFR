# dds <- dds[keep,]
#set comparison level,
dds$treatment <- relevel(dds$treatment, ref = "untreated")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("treatment_dispersionPlot.pdf")
plotDispEsts(dds)
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="6hr_normalized_counts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="6hr_treatment_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("6hr_treatment_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.01, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate File Output
setwd("C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\1hr\\")
dds = DESeqDataSetFromMatrix(countData = counts1hr, colData = coldata1hr, design = ~ mouse + treatment)
#remove low count genes (anything less than 20 reads)
# keep <- rowSums(counts(dds)) >= 20
# dds <- dds[keep,]
#set comparison level,
dds$treatment <- relevel(dds$treatment, ref = "untreated")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("treatment_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="1hr_normalized_counts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="1hr_treatment_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("1hr_treatment_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.01, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate File Output
setwd("C:\\GitHub\\Lowry-Hexadecenoic\\deseq_outputs\\6hr\\")
dds = DESeqDataSetFromMatrix(countData = counts6hr, colData = coldata6hr, design = ~  mouse + treatment)
#remove low count genes (anything less than 20 reads)
# keep <- rowSums(counts(dds)) >= 20
# dds <- dds[keep,]
#set comparison level,
dds$treatment <- relevel(dds$treatment, ref = "untreated")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
hist(res$pvalue)
View(counts)
hist(res$padj)
hist(res$pvalue)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~time + housing)
View(coldata)
plotPCA(rld, intgroup=c("housing"))
rld <- rlog(dds, blind=FALSE)
vst <- vst(dds, blind=FALSE)
ntd <- normTransform(dds)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(vsn)))
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\pdfs\\")
pdf("genotype_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
dev.off()
pdf("treatment_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("housing"))
dev.off()
pdf("day_PCA.pdf")
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("time"))
dev.off()
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
plotPCA(rld, intgroup=c("time"))
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
plotPCA(rld, intgroup=c("housing"))
View(dds)
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
library("vsn")
meanSdPlot(assay(ntd))
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
View(counts)
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
sampleDists <- dist(t(assay(ntd)))
plotPCA(rld, intgroup=c("genotype"))
plotPCA(ntd, intgroup=c("genotype"))
plotPCA(ntd, intgroup=c("housing"))
plotPCA(ntd, intgroup=c("sampleName"))
plotPCA(ntd, intgroup=c("housing"))
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~ housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
ntd <- normTransform(dds)
plotPCA(ntd, intgroup=c("genotype"))
plotPCA(ntd, intgroup=c("housing"))
plotPCA(ntd, intgroup=c("sampleName"))
plotPCA(ntd, intgroup=c("housing"))
plotPCA(ntd, intgroup=c("sampleName"))
#write out statistical results
res <- results(dds)
hist(res$pvalue)
hist(res$padj)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\dn_housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140DNcounts, colData = PN140DNcoldata, design = ~ housing)
#remove low count genes (anything less than 20 reads)
#keep <- rowSums(counts(dds)) >= 20
#dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("dn_housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="dn_PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="dn_PN140_housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("dn_PN140_housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$pvalue)
hist(res$padj)
hist(res$pvalue)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~ time + genotype + housing)
dds_lrt <- DESeq(dds, test="LRT", reduced = ~ 1)
normcounts <- as.data.frame(counts(dds_lrt, normalize=TRUE))
normcountslong <- normcounts %>% gather(key = "sample", value = "signal")
install.packages(tidyr)
install.packages("tidyr")
library(tidyr)
normcountslong <- normcounts %>% gather(key = "sample", value = "signal")
View(normcountslong)
ggplot(normcountslong, aes(x = sample, y = signal))+ geom_violin(trim = FALSE) + theme(axis.text.x = element_text(angle = 90))+scale_y_continuous(trans='log2')
View(normcountslong)
ggplot(normcountslong, aes(x = sample, y = signal))+ geom_violin(trim = FALSE) + theme(axis.text.x = element_text(angle = 90))+scale_y_continuous(trans='log2')
genename="NM_001083319.1"
normcounts[genename,]
plotCounts(dds_lrt, intgroup="type",genename)
ggplot(normcountslong, aes(x = sample, y = signal))+ geom_violin(trim = FALSE) + theme(axis.text.x = element_text(angle = 90))+scale_y_continuous(trans='log2')
genename="NM_001083319.1"
normcounts[genename,]
plotCounts(dds_lrt, intgroup="housing",genename)
View(dds_lrt)
View(counts)
ggplot(normcountslong, aes(x = sample, y = signal))+ geom_violin(trim = FALSE) + theme(axis.text.x = element_text(angle = 90))+scale_y_continuous(trans='log2')
genename="Tnf"
normcounts[genename,]
plotCounts(dds_lrt, intgroup="housing",genename)
res_LRT <- results(dds_lrt)
# Subset the LRT results to return genes with padj < 0.05
padj.cutoff <-0.01
sig_res_LRT <- res_LRT %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble() %>%
filter(padj < padj.cutoff)
install.packages("tibble")
library(tibble)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
sig_res_LRT <- res_LRT %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble() %>%
filter(padj < padj.cutoff)
# Get sig gene lists
sigLRT_genes <- sig_res_LRT %>%
pull(gene)
length(sigLRT_genes)
clustering_sig_genes <- sig_res_LRT %>%
arrange(padj) %>%
head(n=1000)
# Obtain rlog values for those significant genes
cluster_rlog <- rld_mat[clustering_sig_genes$gene, ]
rld <- rlog(dds, blind=FALSE)
# Obtain rlog values for those significant genes
rld_mat <- assay(rld)
cluster_rlog <- rld_mat[clustering_sig_genes$gene, ]
#make meta
meta <-as.data.frame(cbind(paste(ddsCollapsed_normfactor$type),paste(ddsCollapsed_normfactor$samplegroup),paste(ddsCollapsed_normfactor$RNA.prep_date), paste(ddsCollapsed_normfactor$mother)))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~ time + genotype + housing)
controlgenes <-as.matrix(apply(counts(dds),1,FUN = min)<100)
ddsCollapsed_normfactor <-estimateSizeFactors(dds, controlGenes=controlgenes) #adds a column to colData(ddsCollapsed) called sizeFactor if you use normmatrix then normalizationFactors(ddsCollapsed) instead.
ddsCollapsed_normfactor <- estimateDispersionsGeneEst(ddsCollapsed_normfactor) #adds mu to assays(ddsCollapsed) mu-has one column per sample and fills in
#elementMetadata(ddsCollapsed) with baseMean, baseVar, allZero, dispGeneEst, dispGeneIter
ddsCollapsed_normfactor<-estimateDispersionsFit(ddsCollapsed_normfactor) # and fills in dispersionFunction(ddsCollapsed) and adds a column in  elementMetadata(ddsCollapsed) called dispFit
ddsCollapsed_normfactor <- estimateDispersionsMAP(ddsCollapsed_normfactor) #adds a attr(,"dispPriorVar") to dispersionFunction(ddsCollapsed)
#and adds 4 columns to elementMetadata(ddsCollapsed): dispersion, dispIter, dispOutlier, dispMAP
ddsCollapsed_normfactor <- nbinomWaldTest(ddsCollapsed_normfactor) #adds both H and cooks to assays(ddsCollapsed)  both are for each sample you have.
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~ time + genotype + housing)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
counts['Length'] = NULL
#coldata_s <-coldata[order(colnames(counts)),]
#rownames(coldata) = coldata$sampleName
#coldata['sampleName'] = NULL
#rownames(coldata_s) = coldata_s$sampleName
#coldata_s['sampleName'] = NULL
#coldata <- coldata_s
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN140")
PN140DNcounts <- select(PN140counts, contains("B2"))
PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
PN140DNcoldata['time'] = NULL
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design= ~ time + genotype + housing)
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
dds_lrt <- DESeq(dds, test="LRT", reduced = ~ 1)
dds_lrt <- DESeq(dds, test="LRT", reduced = ~ 1)
normcounts <- as.data.frame(counts(dds_lrt, normalize=TRUE))
normcountslong <- normcounts %>% gather(key = "sample", value = "signal")
normcountslong <- normcounts %>% gather(key = "sample", value = "signal")
ggplot(normcountslong, aes(x = sample, y = signal))+ geom_violin(trim = FALSE) + theme(axis.text.x = element_text(angle = 90))+scale_y_continuous(trans='log2')
genename="Tnf"
normcounts[genename,]
plotCounts(dds_lrt, intgroup="housing",genename)
res_LRT <- results(dds_lrt)
# Subset the LRT results to return genes with padj < 0.05
padj.cutoff <-0.01
sig_res_LRT <- res_LRT %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble() %>%
filter(padj < padj.cutoff)
plotCounts(dds_lrt, intgroup="housing",genename)
plotCounts(dds_lrt, intgroup="genotype",genename)
plotCounts(dds_lrt, intgroup="housing",genename)
genename="Il33"
normcounts[genename,]
plotCounts(dds_lrt, intgroup="housing",genename)
plotCounts(dds_lrt, intgroup="genotype",genename)
res_LRT <- results(dds_lrt)
# Subset the LRT results to return genes with padj < 0.05
padj.cutoff <-0.01
sig_res_LRT <- res_LRT %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble() %>%
filter(padj < padj.cutoff)
# Get sig gene lists
sigLRT_genes <- sig_res_LRT %>%
pull(gene)
length(sigLRT_genes)
clustering_sig_genes <- sig_res_LRT %>%
arrange(padj) %>%
head(n=1000)
# Obtain rlog values for those significant genes
rld_mat <- assay(rld)
rld <- rlog(dds, blind=TRUE)
# Obtain rlog values for those significant genes
rld_mat <- assay(rld)
cluster_rlog <- rld_mat[clustering_sig_genes$gene, ]
#make meta
meta <-as.data.frame(cbind(paste(ddsCollapsed_normfactor$time),paste(ddsCollapsed_normfactor$housing),paste(ddsCollapsed_normfactor$genotype)))
#make meta
meta <-as.data.frame(cbind(paste(dds_lrt$time),paste(dds_lrt$housing),paste(dds_lrt$genotype)))
colnames(meta)<-c("time","housing", "genotype")
row.names(meta)<-meta$samplegroup
#make meta
meta <-as.data.frame(cbind(paste(dds_lrt$time),paste(dds_lrt$housing),paste(dds_lrt$genotype)))
colnames(meta)<-c("time","housing", "genotype")
head(rld_mat)
meta <-as.data.frame(cbind(paste(dds_lrt$time),paste(dds_lrt$housing),paste(dds_lrt$genotype),paste(dds_lrt$sampleName)))
colnames(meta)<-c("time","housing","genotype","sampleName")
row.names(meta)<-meta$sampleName
meta
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "time", col=NULL)
install.packages("DEGreport")
library(DEGreport)
BiocManager::install("DEGreport")
library(DEGreport)
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "time", col=NULL)
detach("package:dplyr", unload = TRUE)
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "time", col=NULL)
meta
clusters
colnames(meta)
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "genotype", col=NULL)
clusters
clustering_sig_genes
rld_mat
# Obtain rlog values for those significant
rld <- rlog(dds_lrt, blind=TRUE)
rld_mat <- assay(rld)
cluster_rlog <- rld_mat[clustering_sig_genes$gene, ]
#make meta
meta <-as.data.frame(cbind(paste(dds_lrt$time),paste(dds_lrt$housing),paste(dds_lrt$genotype),paste(dds_lrt$sampleName)))
colnames(meta)<-c("time","housing","genotype","sampleName")
row.names(meta)<-meta$sampleName
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "genotype", col=NULL)
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "time", col=NULL)
levels(meta$time)
meta$time <- levels(meta$time, factor= c("PN60", "PN140"))
meta$time <- factor(meta$time, levels = c("PN60", "PN140"))
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "time", col=NULL)
meta$housingtime <- factor(paste0(meta$time,meta$housing,sep = "_"))
meta$housingtime
meta$housingtime <- factor(paste0(meta$time,"_", meta$housing,sep = ""))
meta$housingtime
meta$housingtime <- factor(paste0(meta$time,"_", meta$housing,sep = ""), levels = c("PN60_same", "PN140_same", "PN60_opposite", "PN140_opposite"))
meta$housingtime
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "time", col=NULL)
# jpeg(paste0(outdir,outfilename,"/",'clusters.jpg', sep=""))
clusters <- degPatterns(cluster_rlog, metadata = meta, time = "housingtime", col=NULL)
