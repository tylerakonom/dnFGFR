pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
# Creating a PDF of each gene identified above
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
n <- paste(genename,"pdf", sep = ".")
pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + dod + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# Creating a PDF of each gene identified above
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
n <- paste(genename,"pdf", sep = ".")
pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
dev.off()
}
# Write out results
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("timehousing-genotype_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
# n <- paste(genename,"pdf", sep = ".")
# pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
}
# Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
# n <- paste(genename,"pdf", sep = ".")
# pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
# dev.off()
}
siggenes
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
# n <- paste(genename,"pdf", sep = ".")
# pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup="timehousing")
# dev.off()
}
for (genename in siggenes){
# n <- paste(genename,"pdf", sep = ".")
# pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup= c("timehousing", "dod"))
# dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# Creating a PDF of each gene identified above
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
n <- paste(genename,"pdf", sep = ".")
pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup= "timehousing")
dev.off()
}
# Write out results
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("timehousing-genotype_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# # Write out normalized counts
# write.csv(normed4, file="all_normCounts.csv")
#
# # Plot dispersions
# pdf("all_genotype-housing-time_dispersionPlot.pdf")
# plotDispEsts(dds4)
# dev.off()
go_procp <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\positive_regulation_of_cytokine_production.txt", sep = "\t", row.names = NULL, header = TRUE)
normed140 <- as.data.frame(normed)
normed140 <- select(normed140, contains("B"))
View(normed140)
normed140 <- as.data.frame(normed)
normed140 <- select(normed140, contains("B"))
normed140 <- normed140[!(apply(normed140, 1, function(y) any(y == 0))),]
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
n <- paste(title,"pdf", sep = ".'")
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Positive Regulation of Cytokine Production"
n <- paste(title,"pdf", sep = ".'")
pdf(file = "positive_regulation_of_cytokine_production2.pdf")
heatmap(mininormed,Colv = NA, main=title)
dev.off()
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Positive Regulation of Cytokine Production"
n <- paste(title,"pdf", sep = ".'")
pdf(file = "positive_regulation_of_cytokine_production2.pdf")
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Positive Regulation of Cytokine Production"
n <- paste(title,"pdf", sep = ".'")
pdf(file = "positive_regulation_of_cytokine_production2.pdf")
heatmap(mininormed, main=title)
dev.off()
normed140 <- rlog(normed140[!(apply(normed140, 1, function(y) any(y == 0))),])
normed140 <- log(normed140[!(apply(normed140, 1, function(y) any(y == 0))),])
View(normed140)
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Positive Regulation of Cytokine Production"
n <- paste(title,"pdf", sep = ".'")
pdf(file = "positive_regulation_of_cytokine_production2.pdf")
heatmap(mininormed, Colv = NA, main=title)
dev.off()
go_iir <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\innate_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE)
normed140 <- as.data.frame(normed)
normed140 <- select(normed140, contains("B"))
normed140 <- log(normed140[!(apply(normed140, 1, function(y) any(y == 0))),])
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_iir$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
pdf(file = "innate_immune_response2.pdf")
title = "Innate Immune Response"
heatmap(mininormed,Colv = NA, main=title)
dev.off()
normed140
normed140 <- as.data.frame(normed)
normed140
normed140["Cxcl16",]
plotCounts(dds, gene = "Cxcl16")
plotCounts(dds, gene = "Cxcl16", intgroup = "timehousing")
normed140 <- normed140["Cxcl16",]
go_iir <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\innate_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE)
normed140 <- as.data.frame(normed)
normed140 <- select(normed140, contains("B"))
normed140 <- log(normed140[!(apply(normed140, 1, function(y) any(y == 0))),])
normed140 <- normed140["Cxcl16",]
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_iir$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
pdf(file = "innate_immune_response2.pdf")
title = "Innate Immune Response"
heatmap(mininormed,Colv = NA, main=title)
normed140 <- normed140[c=("Cxcl16", "Il27",]
normed140 <- normed140[c=("Cxcl16", "Il27"),]
x <- c("Cxcl16","Il27")
normed140 <- normed140[rownames(normed140) in x,]
normed140 <- normed140[rownames(normed140) %in% x,]
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_iir$MGI.Gene.Marker.ID))),]
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_iir$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
pdf(file = "innate_immune_response2.pdf")
title = "Innate Immune Response"
heatmap(mininormed,Colv = NA, main=title)
normed140
x <- c("Cxcl16","Nos2")
normed140 <- normed140[rownames(normed140) %in% x,]
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_iir$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
pdf(file = "innate_immune_response2.pdf")
title = "Innate Immune Response"
heatmap(mininormed,Colv = NA, main=title)
normed140 <- as.data.frame(normed)
normed140 <- select(normed140, contains("B"))
normed140 <- log(normed140[!(apply(normed140, 1, function(y) any(y == 0))),])
View(normed140)
normed140["Il27",]
normed140["Nos2",]
go_iir <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\innate_immune_response.txt", sep = "\t", row.names = NULL, header = TRUE)
normed140 <- as.data.frame(normed)
normed140 <- select(normed140, contains("B"))
normed140 <- log(normed140[!(apply(normed140, 1, function(y) any(y == 0))),])
x <- c("Cxcl16","Nos2")
normed140 <- normed140[rownames(normed140) %in% x,]
mininormed <- normed140[noquote(rownames(normed140)) %in% noquote(unique(as.vector(go_iir$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
pdf(file = "innate_immune_response2.pdf")
title = "Innate Immune Response"
heatmap(mininormed,Colv = NA, main=title)
dev.off()
plotDispEsts(dds)
require(dplyr)
PN140counts <- select(counts, contains("B"))
PN140coldata <- filter(coldata, time=="PN 140")
# PN140DNcounts <- select(PN140counts, contains("B2"))
# PN140DNcoldata <- filter(PN140coldata, genotype =="dnFGFR")
# PN140DNcoldata['time'] = NULL
#
# PN140Ctrlcounts <- select(PN140counts, contains("B1"))
# PN140Ctrlcoldata <- filter(PN140coldata, genotype =="ctrl")
# PN140Ctrlcoldata['time'] = NULL
#
# PN140SScounts <- select(PN140counts, contains(c("B1116","B1117","B1118","B1119","B1120","B2111","B2112","B2113","B2114","B2115")))
# PN140SScoldata <- filter(PN140coldata, housing =="same")
# PN140SScoldata['time'] = NULL
#
# PN60counts <- select(counts, contains("A"))
# PN60coldata <- filter(coldata, time=="PN60")
# PN60DNcounts <- select(PN60counts, contains("A2"))
# PN60DNcoldata <- filter(PN60coldata, genotype =="dnFGFR")
# PN60DNcoldata['time'] = NULL
View(PN140coldata)
View(PN140counts)
PN140coldata <- filter(coldata, time=="PN140")
View(PN140coldata)
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~ genotype + housing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
plotDispEsts(dds)
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
plotDispEsts(dds)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"pdf", sep = ".")
#   pdf(file = n, onefile = FALSE, title = genename)
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()
# }
# # Write out results
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
#
# # Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
# pdf("timehousing-genotype_MAPlot.pdf")
# DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
# abline(h=c(-1,1), col="dodgerblue", lwd=2)
# dev.off()
# # Write out normalized counts
# write.csv(normed4, file="all_normCounts.csv")
#
# # Plot dispersions
# pdf("all_genotype-housing-time_dispersionPlot.pdf")
# plotDispEsts(dds4)
# dev.off()
normed <- log(normed)
normed <- log(normed)
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
go_procp <- read.table("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\positive_regulation_of_cytokine_production.txt", sep = "\t", row.names = NULL, header = TRUE)
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Positive Regulation of Cytokine Production"
n <- paste(title,"pdf", sep = ".'")
pdf(file = "positive_regulation_of_cytokine_production.pdf")
heatmap(mininormed, Colv = NA, main=title)
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Positive Regulation of Cytokine Production"
n <- paste(title,"pdf", sep = ".'")
pdf(file = "positive_regulation_of_cytokine_production.pdf")
heatmap(mininormed, Colv = NA, main=title)
normed = counts(dds, normalized=TRUE)
mininormed <- normed[noquote(rownames(normed)) %in% noquote(unique(as.vector(go_procp$MGI.Gene.Marker.ID))),]
mininormed <- as.matrix(mininormed)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\Go_heatmaps\\")
title = "Positive Regulation of Cytokine Production"
n <- paste(title,"pdf", sep = ".'")
pdf(file = "positive_regulation_of_cytokine_production.pdf")
heatmap(mininormed, Colv = NA, main=title)
dev.off()
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("timehousing-genotype_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
pdf("timehousing-genotype_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out results
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
counts = read.table("refcounts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("coldata.txt", header=TRUE, sep="\t")
coldata$group<-paste(coldata$genotype, coldata$time, coldata$housing, sep="_")
coldata$timehousing <- paste(coldata$time, coldata$housing, sep="_")
coldata$housing <- factor(coldata$housing, levels = c("same","opposite"))
coldata$genotype <- factor(coldata$genotype, levels = c("ctrl", "dnFGFR"))
coldata$time <- factor(coldata$time, levels = c("PN60",  "PN140"))
coldata$group <- factor(coldata$group)
coldata$timehousing <- factor(coldata$timehousing, levels = c("PN60_same", "PN60_opposite","PN140_same", "PN140_opposite"))
coldata$parent <- factor(coldata$parent)
coldata$dod <- factor(coldata$dod)
#remove length from counts table and sort properly
counts['Length'] = NULL
counts <- counts[,coldata$sampleName]
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(tidyr)
library(tibble)
library(DEGreport)
library(vsn)
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"pdf", sep = ".")
#   pdf(file = n, onefile = FALSE, title = genename)
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()
# }
# Write out results
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("timehousing-genotype_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
write.csv(normed4, file="all_normCounts.csv")
# Write out normalized counts
write.csv(normed, file="all_normCounts.csv")
# Creating a PDF of each gene identified above
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
for (genename in siggenes){
n <- paste(genename,"pdf", sep = ".")
pdf(file = n, onefile = FALSE, title = genename)
plotCounts(dds,gene=genename,intgroup= "timehousing")
dev.off()
}
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\")
# Create DESeq object
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + timehousing)
# Run DESeq on the DESeq object
dds = DESeq(dds)
plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
# # Creating a PDF of each gene identified above
# setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\timehousing\\housing\\figures\\")
# for (genename in siggenes){
#   n <- paste(genename,"pdf", sep = ".")
#   pdf(file = n, onefile = FALSE, title = genename)
#   plotCounts(dds,gene=genename,intgroup= "timehousing")
#   dev.off()
# }
# Write out results
write.csv(as.data.frame(res), file="timehousing-genotype_results.csv")
# Create MA Plot, alpha is FDR cutoff, for this experiment it is "0.05"
pdf("timehousing-genotype_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.05, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
# Write out normalized counts
write.csv(normed, file="all_normCounts.csv")
# Plot dispersions
pdf("all_genotype-housing-time_dispersionPlot.pdf")
plotDispEsts(dds4)
res["Gpnmb",]
normed["Gpnmb",]
colData(dds)
view(as.data.frame(colData(dds)))
View(normed)
view(as.data.frame(normed["Gpnmb",]))
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
res["Gpnmb",]
dds["Gpnmb",]
# Run DESeq on the DESeq object
dds = DESeq(dds)
View(res)
plotDispEsts(dds)
res <- results(dds, contrast = c("timehousing", "PN140_same", "PN140_opposite"))
normed = counts(dds, normalized=TRUE)
resSig <- subset(res, padj < 0.05)
rs <- as.data.frame(resSig)
siggenes <- as.vector(rownames(rs))
view(resSig)
