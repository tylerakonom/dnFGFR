normed = counts(dds, normalized=TRUE)
write.csv(normed, file="dn_PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="dn_PN140_housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("dn_PN140_housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\housing-gen\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~genotype + housing)
#remove low count genes (anything less than 20 reads)
keep <- rowSums(counts(dds)) >= 20
dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("housing-gen_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="PN140_housing-gen_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("PN140_housing-gen_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\PN140\\genotype-housing\\")
dds = DESeqDataSetFromMatrix(countData = PN140counts, colData = PN140coldata, design = ~ housing + genotype)
#remove low count genes (anything less than 20 reads)
keep <- rowSums(counts(dds)) >= 20
dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("genotype-housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="PN140_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="PN140_genotype-housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("PN140_genotype-housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist res$padj
hist(res$padj)
hist(res$pvalue)
hist(res$padj)
hist(PN140counts$ENSMUSG00000037461
)
View(PN140counts)
normed["ENSMUSG00000037461",
]
?t.test
?anova
anova(normed["ENSMUSG00000037461
","])
anova(normed["ENSMUSG00000037461",])
gene <- normed["ENSMUSG00000037461",]
gene <- as.data.frame(normed["ENSMUSG00000037461",])
View(gene)
goi<- as.data.frame(normed["ENSMUSG00000037461",])
View(gene)
View(gene)
View(goi)
View(gene)
View(gene)
goi.sorted <- c(CSS, COS, DSS, DOS)
goi.sorted <- c("C-SS", "C-OS", "D-SS", "D-OS")
goi.sorted <- data.frame("C-SS", "C-OS", "D-SS", "D-OS")
View(goi.sorted)
names(goi.sorted) <- data.frame("C-SS", "C-OS", "D-SS", "D-OS")
View(goi.sorted)
rm(goi.sorted)
names(goi.sorted) <- data.frame("C-SS", "C-OS", "D-SS", "D-OS")
View(goi)
View(goi)
goi <- "ENSMUSG00000037461"
goi.count <- as.data.frame(normed[goi,])
name(goi.count) <- goi
names(goi.count) <- goi
View(goi.count)
dplyr::group_by[goi.count, contains("B110")]
COS <- dplyr::select[goi.count, contains("B110")]
COS <- dplyr::select(goi.count, contains("B110"))
goi <- "ENSMUSG00000037461"
goi.count <- as.data.frame(normed[goi,])
names(goi.count) <- goi
COS140 <- dplyr::select(goi.count, contains("B110"))
CSS140 <- dplyr::select(goi.count, contains("B111"))
DOS140 <- dplyr::select(goi.count, contains("B210"))
DSS140 <- dplyr::select(goi.count, contains("B211"))
goi.sorted <- data.frame(COS140, CSS140, DOS140, DSS140)
View(goi.sorted)
goi.sorted <- as.data.frame(COS140, CSS140, DOS140, DSS140)
goi.sorted <- data.frame(COS140, CSS140, DOS140, DSS140)
View(goi.sorted)
View(DOS140)
COS140 <- data.frame(dplyr::select(goi.count, contains("B110")))
View(COS140)
COS140
COS140 <- dplyr::select(goi.count, contains("B110"))
COS140
COS140 <- dplyr::filter(goi.count, is("B110"))
install.packages("margrittr")
devtools::install_github("smbache/magrittr")
install.packages("devtools")
devtools::install_github("smbache/magrittr")
devtools::install_github("smbache/magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
library(margrittr)
library(magrittr)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
ALLOW_WGCNA_THREADS=8
goi.count$cond <- with(goi.count, ifelse(goi.count %in% "B110", "COS140",
goi.count$cond <- with(goi.count, ifelse(goi.count %in% "B110", "COS140",
ifelse(goi.count %in% "B111", "CSS140",
ifelse(goi.count %in% "B210", "DOS140",
ifelse(goi.count %in% "B211", "DSS140", "error")))))
View(goi.count)
goi.count$cond <- with(goi.count, ifelse(goi.count %in% "B110"), "COS140",
ifelse(goi.count %in% "B111"), "CSS140",
ifelse(goi.count %in% "B210"), "DOS140",
ifelse(goi.count %in% "B211"), "DSS140", "error")
View(goi.count)
goi.count$cond <- with(goi.count, ifelse(rownames(goi.count) %in% "B110"), "COS140",
ifelse(rownames(goi.count) %in% "B111"), "CSS140",
ifelse(rownames(goi.count) %in% "B210"), "DOS140",
ifelse(rownames(goi.count) %in% "B211"), "DSS140", "error")
goi.count$cond <- with(goi.count, ifelse(rownames(goi.count) %in% "B110"), "COS140", "error")
goi.count$cond <- ifelse(rownames(goi.count) %in% "B110"), "COS140", "error")
goi.count$cond <- ifelse((rownames(goi.count) %in% "B110"), "COS140", "error"))
goi.count$cond <- ifelse((rownames(goi.count) %in% "B110"), "COS140", "error")
goi.count$cond <- with(goi.count, ifelse((rownames(goi.count) is("B110")), "COS140", "error"))
goi.count$cond <- with(goi.count, ifelse((rownames(goi.count) contains("B110")), "COS140", "error"))
goi.count$cond <- ifelse((rownames(goi.count) contains("B110")), "COS140", "error")
goi.count$cond <- ifelse((rownames(goi.count) is("B110")), "COS140", "error")
goi.count$cond <- ifelse((rownames(goi.count) is"B110"), "COS140", "error")
goi.count$sample <- rownames(goi.count)
View(goi.count)
goi.count$cond <- ifelse((sample %in% "B110"), "COS140", "error")
goi.count$cond <- ifelse((goi.count$sample %in% "B110"), "COS140", "error")
View(goi.count)
View(goi.count)
rm goi.count$cond
;rm(goi.count$cond)
View(goi.count)
goi.count$cond <- ifelse((goi.count$sample %in% "B110"), "COS140", "error")
View(goi.count)
goi.count$cond <- ifelse((goi.count$sample %in% "B110"), "COS140", "1")
View(goi.count)
goi.count$cond <- ifelse((goi.count$sample == "B110"), "COS140", "1")
View(goi.count)
goi.count$cond <- ifelse((goi.count$sample = "B110"), "COS140", "1")
View(goi.count)
goi.count$cond <- ifelse((goi.count$sample (pattern = "B110")), "COS140", "1")
View(goi.count)
View(goi.count)
goi <- "ENSMUSG00000037461"
goi.count <- as.data.frame(normed[goi,])
names(goi.count) <- goi
t.goi.count <- as.data.frame(t(goi.count))
View(t.goi.count)
BiocManager::install("edgeR")
library(edgeR)
?edgeR
View(normed)
hist(normed["ENSMUSG00000037461",])
?edgeR
edgeRUsersGuide()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(edgeR)
ALLOW_WGCNA_THREADS=8
counts <- DGEList(counts = read.delim(all_counts.txt))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(edgeR)
ALLOW_WGCNA_THREADS=8
counts <- DGEList(counts = read.delim(all_counts.txt))
counts <- DGEList(counts = read.table(all_counts.txt))
pwd
gwd()
pwd()
gwd
getwd()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(edgeR)
ALLOW_WGCNA_THREADS=8
getwd()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(edgeR)
ALLOW_WGCNA_THREADS=8
getwd()
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(edgeR)
getwd()
setwd("C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
getwd()
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
setwd("C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(edgeR)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
setwd("C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
library(edgeR)
counts <- DGEList(counts = read.table(all_counts.txt))
counts <- DGEList(counts = read.table(all_counts.txt))
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
getwd()
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
counts = read.table(all_counts.txt)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
getwd()
counts = read.table(all_counts.txt)
counts = read.table("all_counts.txt")
?edgeR
edgeRUsersGuide()
edgeRUsersGuide()
library(edgeR)
edgeRUsersGuide()
y <- DGEList(counts = counts)
y <- DGEList(counts = as.data.frame(counts))
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
library(edgeR)
knitr::opts_chunk$set(echo = TRUE)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
View(counts)
y <- DGEList(counts =counts)
require("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\edgeR_outputs\\")
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
library(edgeR)
knitr::opts_chunk$set(echo = TRUE)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
y <- DGEList(counts =counts)
View(counts)
View(y)
View(y)
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
View(coldata)
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
y <- DGEList(counts =counts)
coldata_sort <-coldata[order(coldata$sample),]
View(coldata_sort)
View(coldata)
View(counts)
y <- DGEList(counts = counts, group = coldata_sort$group)
View(y)
head(y)
view(y$samples)
View(counts)
View(y$samples)
counts_sort <- counts[,(counts$sample)]
y <- DGEList(counts = counts_sort, group = coldata_sort$group)
View(counts)
View(counts_sort)
counts_sort <- counts[,order(counts$sample)]
counts_sort <- counts[,order(colnames(counts))]
View(counts_sort)
View(coldata_sort)
y <- DGEList(counts = counts_sort, group = coldata_sort$group)
View(y$samples)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
View(y)
View(coldata_sort)
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:\\GitHub\\dnFGFR\\deseq_outputs\\")
library(dplyr)
library(DESeq2)
library(knitr)
library(ggplot2)
library(magrittr)
ALLOW_WGCNA_THREADS=8
counts = read.table("all_counts.txt", header=TRUE, row.names=1, sep="\t")
coldata = read.table("all_coldata.txt", header=TRUE, sep="\t")
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\housing-genotype\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + housing)
#remove low count genes (anything less than 20 reads)
keep <- rowSums(counts(dds)) >= 20
dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("housing-genotype_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_housing-genotype_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_housing-genotype_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
View(coldata)
View(counts)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\housing-genotype-time\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ genotype + time + housing)
#remove low count genes (anything less than 20 reads)
keep <- rowSums(counts(dds)) >= 20
dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("housing-genotype-time_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_housing-genotype-time_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_housing-genotype-time_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\genotype-time-housing\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ time + housing + genotype)
#remove low count genes (anything less than 20 reads)
keep <- rowSums(counts(dds)) >= 20
dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("genotype-time-housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_genotype-time-housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_genotype-time-housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
hist(res$padj)
hist(res$pvalue)
hist(res$padj)
#Designate Files
setwd("C:\\GitHub\\dnFGFR\\deseq_outputs\\all_samples\\genotype-time-housing\\")
dds = DESeqDataSetFromMatrix(countData = counts, colData = coldata, design = ~ time + housing + genotype)
#remove low count genes (anything less than 20 reads)
keep <- rowSums(counts(dds)) >= 20
dds <- dds[keep,]
#set comparison level,
dds$housing <- relevel(dds$housing, ref = "same")
dds$genotype <- relevel(dds$genotype, ref = "ctrl")
#perform normalization, dispersion estimate, and statistical tests
dds = DESeq(dds)
#plot dispersions
pdf("genotype-time-housing_dispersionPlot.pdf")
plotDispEsts(dds )
dev.off()
#write out normalized counts
normed = counts(dds, normalized=TRUE)
write.csv(normed, file="all_normCounts.csv")
#write out statistical results
res <- results(dds)
write.csv(as.data.frame(res), file="all_genotype-time-housing_results.csv")
#plot fold changes with 2 fold blue line added, alpha is FDR cutoff, change to whatever cutoff you want
pdf("all_genotype-time-housing_MAPlot.pdf")
DESeq2::plotMA(res, alpha = 0.1, ylim=c(-3,3), cex=.4)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
dev.off()
View(coldata)
View(counts)
